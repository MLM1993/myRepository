{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import gymnasium as gym\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create Cliff Walking environment\n",
        "env = gym.make(\"CliffWalking-v0\")\n",
        "\n",
        "# Q-learning parameters\n",
        "num_episodes = 500\n",
        "alpha = 0.1  # Initial learning rate\n",
        "alpha_decay = 0.995\n",
        "alpha_min = 0.01\n",
        "gamma = 0.99  # Discount factor\n",
        "epsilon = 1.0  # Initial exploration probability\n",
        "epsilon_decay = 0.995\n",
        "epsilon_min = 0.01\n",
        "num_actions = env.action_space.n\n",
        "num_states = env.observation_space.n\n",
        "\n",
        "# Initialize Q-table with zeros\n",
        "Q_table = np.zeros((num_states, num_actions))\n",
        "\n",
        "# Store rewards for plotting\n",
        "reward_history = []\n",
        "\n",
        "# Q-learning loop\n",
        "for episode in range(num_episodes):\n",
        "    state, _ = env.reset()\n",
        "    total_reward = 0\n",
        "\n",
        "    while True:\n",
        "        # Îµ-greedy action selection with epsilon decay\n",
        "        if np.random.rand() < epsilon:\n",
        "            action = np.random.choice(num_actions)  # Explore\n",
        "        else:\n",
        "            action = np.argmax(Q_table[state])  # Exploit\n",
        "\n",
        "        # Take action, observe next state and reward\n",
        "        next_state, reward, terminated, truncated, _ = env.step(action)\n",
        "        done = terminated or truncated\n",
        "        total_reward += reward\n",
        "\n",
        "        # Q-learning update with learning rate decay\n",
        "        best_next_action = np.argmax(Q_table[next_state])\n",
        "        Q_table[state, action] += alpha * (reward + gamma * Q_table[next_state, best_next_action] - Q_table[state, action])\n",
        "\n",
        "        state = next_state\n",
        "\n",
        "        if done:\n",
        "            break\n",
        "\n",
        "    reward_history.append(total_reward)\n",
        "\n",
        "    # Update epsilon and alpha\n",
        "    epsilon = max(epsilon * epsilon_decay, epsilon_min)\n",
        "    alpha = max(alpha * alpha_decay, alpha_min)\n",
        "\n",
        "    # Print progress\n",
        "    if (episode + 1) % 50 == 0:\n",
        "        print(f\"Episode {episode+1}/{num_episodes}, Reward: {total_reward}\")\n",
        "\n",
        "# Plot learning curve\n",
        "plt.plot(reward_history)\n",
        "plt.xlabel(\"Episodes\")\n",
        "plt.ylabel(\"Sum of Rewards\")\n",
        "plt.title(\"Q-learning Performance on Cliff Walking\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "eYWK8002T1jB",
        "outputId": "5d0b92b6-f6fb-465b-f802-bfbc2e618eb5"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episode 50/500, Reward: -2120\n",
            "Episode 100/500, Reward: -271\n",
            "Episode 150/500, Reward: -25\n",
            "Episode 200/500, Reward: -233\n",
            "Episode 250/500, Reward: -447\n",
            "Episode 300/500, Reward: -238\n",
            "Episode 350/500, Reward: -15\n",
            "Episode 400/500, Reward: -15\n",
            "Episode 450/500, Reward: -14\n",
            "Episode 500/500, Reward: -17\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jrN5S-tXyPsM"
      },
      "source": [
        "***CS5004 DQN CartPole Classic Control AY 24/25***\n",
        "\n",
        "This sample code is based on one of the recommended texts. A small number of errors were deliberately injected into the code.\n",
        "\n",
        "If using this code as a basis for Assignment 3\n",
        "â¢\tCorrect the bugs.\n",
        "â¢\tComment the code extensively.\n",
        "â¢\tReplace CartPole with a different Classic Control problem form gym.\n",
        "â¢\tGenerate more informative plots i.e. plot running average.\n",
        "â¢\tConsider generating an animation.\n",
        "â¢\tPlay around with hyperparameters and parameters to achieve âsatisfactoryâ performance.\n",
        "\n",
        "A template will NOT be provided for Task 4. Use this and modify the following (1) shape of obs and actions (2) network structure, (3) processing of experience, etc."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LItVP883j9Wz"
      },
      "source": [
        "*** Based on the code from Chapter 18 Reinforcement Learning by Aurelin Geron.***\n",
        "Make sure you are using the 3rd Edition!\n",
        "And the code is from\n",
        "https://github.com/ageron\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8IPbJEmZpKzu"
      },
      "source": [
        "This project requires Python 3.10 or above:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TFSU3FCOpKzu"
      },
      "outputs": [],
      "source": [
        "import sys\n",
        "assert sys.version_info >= (3, 10)\n",
        "\n",
        "from packaging import version\n",
        "import tensorflow as tf\n",
        "assert version.parse(tf.__version__) >= version.parse(\"2.8.0\")\n",
        "\n",
        "import matplotlib.animation\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bmsf6kF4j9W2"
      },
      "source": [
        "**Warning**: the latest TensorFlow versions are based on Keras 3. For chapters 10-15, it wasn't too hard to update the code to support Keras 3, but unfortunately it's much harder for this chapter, in particular adding custom losses using the functional API is not implemented yet. So for this chapter I've had to revert to Keras 2. To do that, I set the `TF_USE_LEGACY_KERAS` environment variable to `\"1\"` and import the `tf_keras` package. This ensures that `tf.keras` points to `tf_keras`, which is Keras 2.*.\n",
        "\n",
        "***Important notes ref Gymnasium Library:***\n",
        "\n",
        "OpenAI has handed over the maintenance and developmnent of the Gym library to the Farama foundation and it was renamed to Gymnasium. It's a drop-in replacement for OpenAI Gym: you can just install gymnasium instead of gym, and import gymnasium as gym, and everything should work fine.\n",
        "by running the following cell, you accept the Atari ROM license."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1U2C4QlEj9W2"
      },
      "outputs": [],
      "source": [
        "IS_COLAB = \"google.colab\" in sys.modules\n",
        "if IS_COLAB:\n",
        "    import os\n",
        "    os.environ[\"TF_USE_LEGACY_KERAS\"] = \"1\"\n",
        "    import tf_keras"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if \"google.colab\" in sys.modules or \"kaggle_secrets\" in sys.modules:\n",
        "    %pip install -q -U gymnasium swig\n",
        "    %pip install -q -U gymnasium[classic_control,box2d,atari]\n",
        "\n",
        "import gymnasium as gym"
      ],
      "metadata": {
        "id": "mnIrZXvNOBnb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e55e8bdb-1d6a-4dbb-badf-dcabe3216afa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m28.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m374.4/374.4 kB\u001b[0m \u001b[31m20.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for box2d-py (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GJtVEqxfpKzw"
      },
      "source": [
        "And TensorFlow â¥ 2.8:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DDaDoLQTpKzx"
      },
      "source": [
        "Define the default font sizes for plots."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8d4TH3NbpKzx"
      },
      "outputs": [],
      "source": [
        "plt.rc('font', size=14)\n",
        "plt.rc('axes', labelsize=14, titlesize=14)\n",
        "plt.rc('legend', fontsize=14)\n",
        "plt.rc('xtick', labelsize=10)\n",
        "plt.rc('ytick', labelsize=10)\n",
        "plt.rc('animation', html='jshtml')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RcoUIRsvpKzy"
      },
      "source": [
        "And the implementation for saving figures to a specific folder `images/rl` folder."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PQFH5Y9PpKzy"
      },
      "outputs": [],
      "source": [
        "from pathlib import Path\n",
        "\n",
        "IMAGES_PATH = Path() / \"images\" / \"rl\"\n",
        "IMAGES_PATH.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
        "    path = IMAGES_PATH / f\"{fig_id}.{fig_extension}\"\n",
        "    if tight_layout:\n",
        "        plt.tight_layout()\n",
        "    plt.savefig(path, format=fig_extension, dpi=resolution)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YTsawKlapKzy"
      },
      "source": [
        "Check for GPU"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ekxzo6pOpKzy"
      },
      "outputs": [],
      "source": [
        "if not tf.config.list_physical_devices('GPU'):\n",
        "    print(\"No GPU was detected. Neural nets can be very slow without a GPU.\")\n",
        "    if \"google.colab\" in sys.modules:\n",
        "        print(\"Go to Runtime > Change runtime and select a GPU hardware \"\n",
        "              \"accelerator.\")\n",
        "    if \"kaggle_secrets\" in sys.modules:\n",
        "        print(\"Go to Settings > Accelerator and select GPU.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3wedxCiEj9W3"
      },
      "source": [
        "# Introduction to Gymnasium"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JBxw8Ox9j9W3"
      },
      "outputs": [],
      "source": [
        "env = gym.make(\"CartPole-v1\", render_mode=\"rgb_array\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RLIKIdN_j9W3"
      },
      "source": [
        "The CartPole (version 1) is composed of a cart that can move left or right on a sect5ion of track, and has a pole placed vertically on top of it. The agent must move the cart left or right to keep the pole upright.\n",
        "\n",
        "Each observation is a 1D NumPy array composed of 4 floats: cart's horizontal position, its velocity, the angle of the pole (0 = vertical), and the angular velocity.\n",
        "\n",
        "There are two possible actions: accelerate towards the left (0) or towards the right (1)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mll801-Pj9W3"
      },
      "source": [
        "**Tip**: `gym.envs.registry` is a dictionary containing all available environments:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NEKKbu1Pj9W3",
        "outputId": "42962769-651c-4526-ce11-b4febcec6785"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Acrobot-v1', 'Ant-v2', 'Ant-v3', 'Ant-v4', 'Ant-v5', '...']"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# extra code â shows the first few environments\n",
        "envs = gym.envs.registry\n",
        "sorted(envs.keys())[:5] + [\"...\"]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LXtKdF95j9W4"
      },
      "source": [
        "The registry values are environment specifications:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nMG41grZj9W4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ca6a3a1-7181-421b-a6fb-9ad9c5310a56"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EnvSpec(id='CartPole-v1', entry_point='gymnasium.envs.classic_control.cartpole:CartPoleEnv', reward_threshold=475.0, nondeterministic=False, max_episode_steps=500, order_enforce=True, disable_env_checker=False, kwargs={}, namespace=None, name='CartPole', version=1, additional_wrappers=(), vector_entry_point='gymnasium.envs.classic_control.cartpole:CartPoleVectorEnv')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "# extra code â shows the specification for the CartPole-v1 environment\n",
        "envs[\"CartPole-v1\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "shcvk7P_j9W4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98194fee-3dfa-4269-cafc-2dc116f936ad"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "obs, info = env.reset(seed=42)\n",
        "obs\n",
        "info"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JpetnhpSj9W5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "9ea9fc96-c69a-48e4-b4ef-9365c747703e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZcAAAEWCAYAAACqitpwAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAACENJREFUeJzt3U+PZFUdx+HfvdU9f5lxAAlD1JiogYkJSzdIMiYu3BjegC+AxDfgu3DP3ndhDHswxGiCGA1hMQyNRAYHZujpqrrHxcB0D3bPnILvdFUzz7O9VdW/TeWTc071vUNrrRUABI3rHgCAbx9xASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACIExcA4sQFgDhxASBOXACI21r3AHCStNbqw7/+sW7/59qh17/7wkt18XtXjnkq2DziAqtoU/332tt189rbh15+4tkfiwuUbTFYSZumatO07jFg44kLrKBNy6omLvAw4gIraG1p5QIdxAVW0KapWluuewzYeOICK2jTspptMXgocYEVtGlZZVsMHkpcYAVWLtBHXGAFrfkpMvQQF1jB8s7tWs53D702zLZrdursMU8Em0lcYAV3bn5U81s3Dr22fe5inXny8jFPBJtJXCBkGMYaRndUgipxgZhhGGscZ+seAzaCuEDKONYgLlBV4gIxd7fFxAWqxAVyxAXuERcIGYZBXOAL4gIhtsVgn7hAyjjWMBMXqBIX6NZae+B1KxfYJy6wgml60LNchhoGXymoEhdYSVsu1j0CnAjiAiuYlvN1jwAngrhAt2blAp3EBXo1KxfoJS7QzcoFeokLrMDKBfqIC6ygiQt0ERfo1FqrybYYdBEX6NZq8fnNI69unT57jLPAZhMX6NSmZd18/x9HXr/4/Z8e4zSw2cQFQsbZ9rpHgI0hLhAyiAvcIy4QMm6JC3xJXCDEygX2iQuEjLOtdY8AG0NcIMSBPuwTFwhx5gL7xAVCnLnAPnGBENtisE9coFObWlW1I68P4+z4hoENJy7QqU3uiAy9xAU6eZYL9BMX6DQtFlXt6G0xYJ+4QKe2nD/gxAU4SFygkweFQT9xgU53H3Fs7QI9xAU6WblAP3GBTm05t3CBTuICne6uXNQFeogLdPr8xvVqbTr02umLz7j9CxwgLtBp95OdI//P5eyTz7krMhwgLhAwjFtVw7DuMWBjiAsEDLOtqhIX+JK4QMAw26rBygXuERcIGGe2xeAgcYGAYbQtBgeJCwSMtsXgPuICAVYucD9xgYDBmQvcR1ygQ2vtgQ8KG8fZMU4Dm09coEebjrz1y12DMxc4QFygQ5umatNy3WPAiSEu0KG1qdr0oJULcJC4QIc2La1cYAXiAh1am6o1cYFe4gI9nLnASsQFOrQ2VTlzgW7iAh2cucBqxAU63P21mLhAL3GBDsvdWzXf/fTQa+PWqdo+/51jngg229a6B4Djtru7Wzs7Oyu9Z++jf9X81ieHXmuzU3XjdqvP3nuv+/POnDlTly9fXmkGOEnEhcfOW2+9VS+//PJK7/n5iz+o3//2V4de29nZqd+88kr989rH3Z939erVev3111eaAU4SceGx1B5wE8pDXz/dff2yzWp3Ol9TG2t72KvT4+2aplZ78+VKn7nq34eTRlyg07KN9ffPXqoP935Y83a6Lsw+rufPv1lTe7vmC4f9cJC4QId5O11/++wX9cGdH9eXDwW7uXym/vLpL+vp3U9rsfQ/MHCQX4tBh08Wz9YHd35SX33a5KKdrndu/azmC3GBg8QFvqFpajVf2haDg8QFOgzVaqgjVidtUQsrF7iPuECHp7ffr+fPvfF/gTk/u1EvPvEnKxf4Cgf60GG5XNST05v1XN2qa7sv1N50ti5tf1g/2v5z/Xv3o1os/bQYDuqOy2uvvfYo54Bj8+677678njfeeb9+/bs/VPtig6xquLdV9nWycv36dd8pTqxXX331oa/pjsuVK1e+0TCwKZZfYwurtap58OfG586d853iW607LlevXn2Uc8Cx2d7eXvcIdenSJd8pvtUc6AMQJy4AxIkLAHHiAkCcuAAQJy4AxIkLAHFu/8JjZ2trq5566qm1znDhwoW1/n141Ibmeas8ZqZpqr29vbXOMI5jnTp1aq0zwKMkLgDEOXMBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDixAWAOHEBIE5cAIgTFwDi/gdgRKN5Yk1g8AAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# extra code â creates a little function to render and plot an environment\n",
        "\n",
        "def plot_environment(env, figsize=(5, 4)):\n",
        "    plt.figure(figsize=figsize)\n",
        "    img = env.render()\n",
        "    plt.imshow(img)\n",
        "    plt.axis(\"off\")\n",
        "    return img\n",
        "\n",
        "plot_environment(env)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WEVSxqk2j9W5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3df436e3-1e12-4e21-ccc9-5e24ea57dcfa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.02727336,  0.18847767,  0.03625453, -0.26141977], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "env.action_space\n",
        "\n",
        "action = 1  # accelerate right\n",
        "obs, reward, done, truncated, info = env.step(action)\n",
        "obs"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J3JZ7Lxhj9W7"
      },
      "source": [
        "The environment also tells the agent how much reward it got during the last step:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TN6unaL-j9W7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ace41dd9-dec4-405c-9dd7-95fce8b3fc3c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "reward\n",
        "done\n",
        "truncated\n",
        "info"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VDfWWgkKj9W8"
      },
      "outputs": [],
      "source": [
        "if done or truncated:\n",
        "    obs, info = env.reset()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mBXFvC9Tj9XB"
      },
      "source": [
        "# Deep Q-Network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "knQazmTDj9XB"
      },
      "outputs": [],
      "source": [
        "tf.random.set_seed(42)  # extra code â ensures reproducibility on the CPU\n",
        "\n",
        "input_shape = [4]  # == env.observation_space.shape\n",
        "n_outputs = 2  # == env.action_space.n\n",
        "\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(28, activation=\"elu\", input_shape=input_shape),\n",
        "    tf.keras.layers.Dense(28, activation=\"elu\"),\n",
        "    tf.keras.layers.Dense(n_outputs)\n",
        "])\n",
        "\n",
        "def epsilon_greedy_policy(state, epsilon=0):\n",
        "    if np.random.rand() < epsilon:\n",
        "        return np.random.randint(n_outputs)  # random action\n",
        "    else:\n",
        "        Q_values = model.predict(state[np.newaxis], verbose=0)[0]\n",
        "        return Q_values.argmax()  # optimal action according to the DQN\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fox7W5wMj9XC"
      },
      "outputs": [],
      "source": [
        "# extra code â A basic circular buffer implementation\n",
        "\n",
        "from collections import deque\n",
        "\n",
        "replay_buffer = deque(maxlen=2000)\n",
        "\n",
        "def sample_experiences(batch_size):\n",
        "    indices = np.random.randint(len(replay_buffer), size=batch_size)\n",
        "    batch = [replay_buffer[index] for index in indices]\n",
        "    return [\n",
        "        np.array([experience[field_index] for experience in batch])\n",
        "          for field_index in range(6)\n",
        "    ]  # [states, actions, rewards, next_states, dones, truncateds]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gllAUC_Vj9XC"
      },
      "source": [
        "Now we can create a function that will use the DQN to play one step, and record its experience in the replay buffer:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BRhC5gsnj9XC"
      },
      "outputs": [],
      "source": [
        "def play_one_step(env, state, epsilon):\n",
        "    action = epsilon_greedy_policy(state, epsilon)\n",
        "    next_state, reward, done, truncated, info = env.step(action)\n",
        "    replay_buffer.append((state, action, reward, next_state, done, truncated))\n",
        "    return next_state, reward, done, truncated, info"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YOkLDnaij9XC"
      },
      "source": [
        "Lastly, let's create a function that will sample some experiences from the replay buffer and perform a training step:"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "nwbXvILTovl0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IGVQl7Y_j9XC"
      },
      "outputs": [],
      "source": [
        "# extra code â for reproducibility, and to generate the next figure\n",
        "env.reset(seed=42)\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "rewards = []\n",
        "best_score = 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YRq0bFgHj9XC"
      },
      "outputs": [],
      "source": [
        "batch_size = 32\n",
        "discount_factor = 0.95\n",
        "optimizer = tf.keras.optimizers.Nadam(learning_rate=1e-2)\n",
        "loss_fn = tf.keras.losses.mean_squared_error\n",
        "\n",
        "def training_step(batch_size):\n",
        "    experiences = sample_experiences(batch_size)\n",
        "    states, actions, rewards, next_states, dones, truncateds = experiences\n",
        "    next_Q_values = model.predict(next_states, verbose=0)\n",
        "    max_next_Q_values = next_Q_values.min(axis=1)\n",
        "    runs = 1.0 - (dones | truncateds)  # episode is not done or truncated\n",
        "    target_Q_values = rewards + runs * discount_factor * max_next_Q_values\n",
        "    target_Q_values = target_Q_values.reshape(-1, 1)\n",
        "    mask = tf.one_hot(actions, n_outputs)\n",
        "    with tf.GradientTape() as tape:\n",
        "        all_Q_values = model(states)\n",
        "        Q_values = tf.reduce_sum(all_Q_values * mask, axis=1, keepdims=True)\n",
        "        loss = tf.reduce_mean(loss_fn(target_Q_values, Q_values))\n",
        "\n",
        "    grads = tape.gradient(loss, model.trainable_variables)\n",
        "    optimizer.apply_gradients(zip(grads, model.trainable_variables))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2WIJspF4j9XC"
      },
      "source": [
        "And now, let's train the model!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "sii-a_wbj9XC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3783c9ff-9236-497a-9874-614c31162177"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episode: 52, Steps: 17, eps: 0.500"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:5 out of the last 5 calls to <function _BaseOptimizer._update_step_xla at 0x7eb501f13060> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
            "WARNING:tensorflow:6 out of the last 6 calls to <function _BaseOptimizer._update_step_xla at 0x7eb501f13060> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episode: 150, Steps: 45, eps: 0.500"
          ]
        }
      ],
      "source": [
        "for episode in range(150):\n",
        "    obs, info = env.reset()\n",
        "    for step in range(200):\n",
        "        epsilon = 0.5\n",
        "        obs, reward, done, truncated, info = play_one_step(env, obs, epsilon)\n",
        "        if done or truncated:\n",
        "            break\n",
        "\n",
        "    # extra code â displays debug info, stores data for the next figure, and\n",
        "    #              keeps track of the best model weights so far\n",
        "    print(f\"\\rEpisode: {episode + 1}, Steps: {step + 1}, eps: {epsilon:.3f}\",\n",
        "          end=\"\")\n",
        "    rewards.append(step)\n",
        "    if step >= best_score:\n",
        "        best_weights = model.get_weights()\n",
        "        best_score = step\n",
        "\n",
        "    if episode > 50:\n",
        "        training_step(batch_size)\n",
        "\n",
        "model.set_weights(best_weights)  # extra code â restores the best model weights"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "anQ_GHoQj9XD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "outputId": "0d2633f9-b78f-4760-a54e-7a95df526c7a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAwkAAAF6CAYAAABSshTKAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAzBhJREFUeJzsnXeYG9XV/7+jru3N2+xdN9wrGHeqcQmmBgdCIAmEBFKcvAEnIa+TQIBQAm9CSSAFfgRCgsEQwGBiDLYxNrjbuPeyLrvr3bW3aXfVpfn9MXNHI2kkjWallbR7Ps/jB1ZldHU1Gt1zz/l+D8fzPA+CIAiCIAiCIAgRXaoHQBAEQRAEQRBEekFBAkEQBEEQBEEQQVCQQBAEQRAEQRBEEBQkEARBEARBEAQRBAUJBEEQBEEQBEEEQUECQRAEQRAEQRBBUJBAEARBEARBEEQQFCQQBEEQBEEQBBEEBQkEQRAEQRAEQQRBQQJBEARBEARBEEEYUj2AUDo6OvDAAw/gvffeQ1NTEy688EI899xzmDx5MgCA53n89re/xUsvvYS2tjbMnDkTf/3rXzFs2DDVr+H3+1FfX4/c3FxwHJest0IQBEEQBEEQaQXP8+jo6EBlZSV0uij5Aj7NuOWWW/jRo0fz69at448ePcr/9re/5fPy8vja2lqe53n+97//PZ+fn88vW7aM3717N3/99dfzgwcP5h0Oh+rXOHPmDA+A/tE/+kf/6B/9o3/0j/7Rvz7578yZM1HXyxzP8zzSBIfDgdzcXLz//vu45pprpNsnTZqEq6++Gr/73e9QWVmJn/3sZ/j5z38OAGhvb0dZWRleffVV3Hrrrapep729HQUFBThz5gzy8vKS8l6i4fF48Mknn2Du3LkwGo09/vq9FZrX5EDzmhxoXpMHzW1yoHlNDjSvyYHmNTI2mw1VVVVoa2tDfn5+xMelVbmR1+uFz+eDxWIJut1qteKLL75ATU0NGhoaMHv2bOm+/Px8TJ06FZs2bYoYJLhcLrhcLunvjo4O6bhWqzUJ7yQ6BoMBWVlZsFqtdOImEJrX5EDzmhxoXpMHzW1yoHlNDjSvyYHmNTIejwcAYpbcp1UmAQBmzJgBk8mEJUuWoKysDG+88QbuuOMOXHDBBXjllVcwc+ZM1NfXo6KiQnrOLbfcAo7jsHTpUsVjPvTQQ3j44YfDbl+yZAmysrKS9l4IgiAIgiAIIp2w2+247bbb0N7eHrWiJq0yCQDwr3/9C3fddRf69+8PvV6Piy66CN/4xjewY8cOzcdcvHgxFi1aJP3N0ixz585NWbnRqlWrMGfOHIpuEwjNa3KgeU0ONK/Jg+Y2OdC8Jgea1+RA8xoZm82m6nFpFyQMHToU69atQ1dXF2w2GyoqKvD1r38dQ4YMQXl5OQCgsbExKJPQ2NiIiRMnRjym2WyG2WwOu91oNKb0xEn16/dWaF6TA81rcqB5TR40t8mB5jU50LwmB5rXcNTOR9r2ScjOzkZFRQVaW1vx8ccf44YbbsDgwYNRXl6ONWvWSI+z2WzYsmULpk+fnsLREgRBEARBEETvIe0yCR9//DF4nseIESNw7Ngx/OIXv8DIkSPxne98BxzH4d5778Wjjz6KYcOGYfDgwXjggQdQWVmJG2+8MdVDJwiCIAiCIIheQdoFCe3t7Vi8eDFqa2tRVFSEBQsW4LHHHpNSI/fffz+6urpwzz33oK2tDZdccglWrlwZ5ohEEARBEARBEIQ20i5IuOWWW3DLLbdEvJ/jODzyyCN45JFHenBUBEEQBEEQBNF3SFtNAkEQBEEQBEEQqYGCBIIgCIIgCIIggqAggSAIgiAIguhz+P1p1U847aAggSAIgiAIguhT1Lc5MOnRVXjio4OpHkraQkECQRAEQRAE0afYW9eOVrsHnx85n+qhpC0UJBAEQRAEQRB9Co/PDwBwen0pHkn6QkECQRAEQRAE0adwe4UgweXxp3gk6QsFCQRBEARBEESfggUJTg9lEiJBQQJBEARBEATRp3D7KEiIBQUJBEEQBEEQRJ9CyiR4qdwoEhQkEARBEARBEH0Klxgc+Py8JGImgqEggSAIgiAIguhTuGUZBCo5UoaCBIIgCIIgCKJPIc8eOMnhSBEKEgiCIAiCIIg+BWUSYkNBAkEQBEEQBNGncMsyCS5qqKYIBQkEQRAEQRBEnyI4k0DlRkpQkEAQBEEQBEH0KajcKDYUJBAEQRAEQRB9ChcJl2NCQQJBEARBEATRp6BMQmwoSCAIgiAIgiD6FEEWqCRcVoSCBIIgCIIgCKJPQcLl2FCQQBAEQRAEQfQpqNwoNhQkEARBEARBEH0Kt4+ChFhQkEAQBEEQBEH0KeSZBJeXyo2USLsgwefz4YEHHsDgwYNhtVoxdOhQ/O53vwPP89JjeJ7Hgw8+iIqKClitVsyePRtHjx5N4agJgiAIgiCITIHKjWKTdkHCk08+ib/+9a94/vnncfDgQTz55JN46qmn8Oc//1l6zFNPPYU//elP+Nvf/oYtW7YgOzsb8+bNg9PpTOHICYIgCIIgiEzARUFCTAypHkAoGzduxA033IBrrrkGADBo0CC88cYb2Lp1KwAhi/Dss8/iN7/5DW644QYAwGuvvYaysjIsW7YMt956a8rGThAEQRAEQaQ/HmqmFpO0CxJmzJiBF198EUeOHMHw4cOxe/dufPHFF3j66acBADU1NWhoaMDs2bOl5+Tn52Pq1KnYtGmTYpDgcrngcrmkv202GwDA4/HA4/Ek+R2Fw14zFa/dm6F5TQ40r8mB5jV50NwmB5rX5EDzmhxizau83MjuTs16MFWofa8cLy/2TwP8fj9+9atf4amnnoJer4fP58Njjz2GxYsXAxAyDTNnzkR9fT0qKiqk591yyy3gOA5Lly4NO+ZDDz2Ehx9+OOz2JUuWICsrK3lvhiAIgiAIgkg7frFFD7efAwBcVOzHHcP7TjbBbrfjtttuQ3t7O/Ly8iI+Lu0yCW+99RZef/11LFmyBGPGjMGuXbtw7733orKyEnfccYemYy5evBiLFi2S/rbZbKiqqsLcuXOjTk6y8Hg8WLVqFebMmQOj0djjr99boXlNDjSvyYHmNXnQ3CYHmtfkQPOaHGLN68+2rAIg7JMX9SvD/PkX9vAIUwerqIlF2gUJv/jFL/C///u/UtnQuHHjcOrUKTzxxBO44447UF5eDgBobGwMyiQ0NjZi4sSJisc0m80wm81htxuNxpR+IVP9+r0VmtfkQPOaHGhekwfNbXKgeU0ONK/JQWle/X4eXn+gkMbl4/vU3Kt9r2nnbmS326HTBQ9Lr9fD7xfSQIMHD0Z5eTnWrFkj3W+z2bBlyxZMnz69R8dKEARBEARBZBbyRmoA4CLhsiJpl0m47rrr8Nhjj6G6uhpjxozBzp078fTTT+Ouu+4CAHAch3vvvRePPvoohg0bhsGDB+OBBx5AZWUlbrzxxtQOniAIgiAIgkhrQpunOb1kgapE2gUJf/7zn/HAAw/gRz/6EZqamlBZWYnvf//7ePDBB6XH3H///ejq6sI999yDtrY2XHLJJVi5ciUsFksKR04QBEEQBEGkO56QTAL1SVAm7YKE3NxcPPvss3j22WcjPobjODzyyCN45JFHem5gBEEQBEEQRMbjDs0kULmRImmnSSAIgiAIgiCIZBEeJFAmQQkKEgiCIAiCIIg+Q6hwmYIEZShIIAiCIAiCIPoMYZkEL5UbKUFBAkEQBEEQBNFnYO5GOWZBmuv2+uGX9U0gBChIIAiCIAiCIPoMLJOQZwn494TaohIUJBAEQRAEQRB9CGaBmmsJdB4mXUI4FCQQBEEQBEEQfQaWSbCY9DDqOQDUUE0JChIIgiAIgiCIPgNzNzLrdbAY9ACoV4ISFCQQBEEQBEEQfQaWSTAaOJiNLEigTEIoFCQQBEEQBEEQfQYWJJj0OliMwlKYgoRwKEggCIIgCIIg+gwusdzIZNDBYqRyo0hQkEAQBEEQBEH0GaRMgkEfyCSQcDkMChIIgiAIgiCIPgOzQDXJhMsuKjcKg4IEgiAIgiAIos8QyCRQuVE0KEggCIIgCIIg+gwsSDAbAsJlB2USwqAggSAIgiAIgugzsD4JRj1ZoEaDggSCIAiCIAiizxBUbkTN1CJCQQJBEARBEATRZ3BJfRL01CchChQkEARBEARBEH0GReEyWaCGQUECQRAEQRAE0WfwBDVTE5bCLio3CoOCBIIgCIIgCKLPoKxJoExCKBQkEARBEARBEH0G5m5k1sv7JFCQEAoFCQRBEARBEESfgWUSjAZOJlymcqNQDKkeAEEQBEEQBEH0FG6Zu5HZyAMg4bISaZdJGDRoEDiOC/u3cOFCAIDT6cTChQtRXFyMnJwcLFiwAI2NjSkeNUEQBEEQBJEJuHwK7kZUbhRG2gUJ27Ztw9mzZ6V/q1atAgDcfPPNAID77rsPy5cvx9tvv41169ahvr4eN910UyqHTBAEQRAEQWQIwcJlKjeKRNqVG/Xr1y/o79///vcYOnQoLr/8crS3t+Pll1/GkiVLMGvWLADAK6+8glGjRmHz5s2YNm1aKoZMEARBEARBZAiSBapeB068jTIJ4aRdkCDH7Xbj3//+NxYtWgSO47Bjxw54PB7Mnj1beszIkSNRXV2NTZs2RQwSXC4XXC6X9LfNZgMAeDweeDye5L4JBdhrpuK1ezM0r8mB5jU50LwmD5rb5EDzmhx6+7y+u7MOVqMeV48t79HXjTavLjEg0MMPnhM1CR5fr/0MQlH7PtM6SFi2bBna2tpw5513AgAaGhpgMplQUFAQ9LiysjI0NDREPM4TTzyBhx9+OOz2Tz75BFlZWYkcclywUioisdC8Jgea1+RA85o8aG6TA81rcuiN87q/lcOLh/TQczw8J7+EIQVF7krzauvSA+CwdfNGCCGCAW0dXVixYkUPjy412O12VY9L6yDh5ZdfxtVXX43KyspuHWfx4sVYtGiR9LfNZkNVVRXmzp2LvLy87g4zbjweD1atWoU5c+bAaDT2+Ov3VmhekwPNa3KgeU0eNLfJgeY1OfTWeXW4ffi/P28A4ISP5zD98qvQL9fcY68fbV4f2r0WcHtw5eWXggOHP+7dCM5gwvz5V/bY+FIJq6iJRdoGCadOncLq1avx7rvvSreVl5fD7Xajra0tKJvQ2NiI8vLIaSyz2QyzOfzENBqNKf1Cpvr1eys0r8mB5jU50LwmD5rb5EDzmhx627w+s+Y4atuc0t92L5+S96c0rx6fkD/Ispih5wRVgtPj71XzHw217zPt3I0Yr7zyCkpLS3HNNddIt02aNAlGoxFr1qyRbjt8+DBOnz6N6dOnp2KYBEEQBEEQhIyjjR146fMTAACDTliEt9nTp94/yN2INVPz+sDzfCqHlXakZSbB7/fjlVdewR133AGDITDE/Px8fPe738WiRYtQVFSEvLw8/OQnP8H06dPJ2YggCIIgCCLF8DyPXy/bB4+Px+xRZWi0ObG3rh3tjvQIEnieh1vmbmQShRI8D7h9fpgN+lQOL61Iy0zC6tWrcfr0adx1111h9z3zzDO49tprsWDBAlx22WUoLy8PKkkiCIIgCIIgUsM7X9Zha00LrEY9Hrp+NAqyhNKWdMkksFIjIDiTAFCvhFA0BQl79+7FP/7xjyDhg8PhwA9/+EP0798fF1xwAf72t79pHtTcuXPB8zyGDx8edp/FYsELL7yAlpYWdHV14d13342qRyAIgiAIgiCST5vdjcdXHAQA/HT2MAwozEK+VQgS0iWTwLIIAGA26IReCWKzBBf1SghCU5Dw6KOP4oEHHkBubq50269+9Sv8/e9/R0dHB86cOYOFCxf2SjsvgiAIgiAIIpy1h5vQ0uXGkJJsfPeSwQAgBQlt6RIkeANBghAgcLCIJUaUSQhGU5CwdetWXHnlleDE0Mvr9eKVV17BlClT0NTUhJqaGvTr1w/PPfdcQgdLEARBEARBpCcdTi8AYER5Lox6YYnJyo1saRYkGHQcdKKoWi5eJgJoChLOnTuHqqoq6e9t27bBZrPhBz/4ASwWCyorK3HDDTdg9+7dCRsoQRAEQRAEkb44xXIdizEg/pUyCXZ3SsYUCgsSWBADBMbrpHKjIDQFCQaDAS6XS/r7s88+A8dxuPLKQBOK4uJinD9/vvsjJAiCIAiCINIeh1tYgMuDhAKrCUA6aRKEQMBkUAoSqNxIjqYgYdCgQVi7dq3099tvv43Bgwdj4MCB0m11dXUoLi7u/ggJgiAIgiCItIeV68gdg/LSTJPgkvVIYJjF/6dMQjCagoRvfetb2L17N6ZOnYrLLrsMu3fvxm233Rb0mD179mDYsGEJGSRBEARBEASR3iiVGzFNQrpkEpgFqonKjWKiKUj48Y9/jJtvvhnbt2/HF198gauvvhq/+tWvpPv379+P3bt3Y9asWQkbKEEQBEEQBJG+sEW2VUGT0J4mfRKYJsEcVG7EhMtUbiRHU8dls9mMpUuXwmazgeO4ICtUACgrK8POnTsxaNCgRIyRIAiCIAiCSHNYTb+83EieSeB5XnLGTBVuhXIjyiQooylIYOTl5SneXlJSgpKSku4cmiAIgiAIgsggorkbef08utw+5Ji7tfTsNorCZbFPAjVTC0ZTuRFBEARBEARByJGCBEMgSLAa9VL9fzroEpQtUJlwmcqN5KgK53Q6nab0EMdx8Hq9cT+PIAiCIAiCyCwcLEgwBYIEjuOQZzXifKcLbXY3+hdYUzU8ADJ3IxIux0RVkHDZZZeFBQmtra3Ys2cP9Ho9qqqqUFZWhsbGRpw5cwY+nw/jx49HYWFhUgZNEARBEARBpBeSJsEQXKhSkCUECemUSVDUJFDH5SBUBQmfffZZ0N+1tbWYOXMmbrvtNjz++OOorq6W7jt9+jQWL16MDRs24MMPP0zoYAmCIAiCIIj0REmTAKSXw5FkgSrvk0DlRopo0iT8/Oc/R0VFBf79738HBQgAUF1djddffx3l5eX4xS9+kZBBEgRBEARBEOkNK+WxmoKDhII0aqjm9kYWLmspN1q67TTe/bI2MYNLMzQFCatXr8ZVV10V9TGzZs3C6tWrNQ2KIAiCIAiCyCwc7nDhMiDLJKRDkOAT+yQoahLiyyR0urxY/O5e/PKdPVIZU29CU5DgdDpx9uzZqI+pr6+Hw+HQNCiCIAiCIAgis2A1/fI+CQCQL/ZKaEuDciNlTQJrphZfJsHu8sLPCyVMrl6oZ9AUJEyaNAlvvvkmNm3apHj/xo0bsXTpUkyePLlbgyMIgiAIgiAyg5iahHTIJChaoGrrk+CSZQ+Y1qE3oamjxWOPPYarrroKl156Ka677jpccsklKC0tRVNTEz7//HN8+OGHMBgMePTRRxM9XoIgCIIgCCLN4Hle1nFZWZPQ7nD3+LhCcfmiZBLiLDeSZw96Y7mRpiDhkksuwYoVK3DPPffg/fffx/vvvw+O48DzQhQ1ePBgvPjii5g5c2ZCB0sQBEEQBEGkH/Jd9dByo4IsE4D0yiQkQrgsf88UJMi46qqrcOzYMXzxxRfYvXs32tvbkZ+fjwkTJuCSSy7R1HyNIAiCIAiCyDzkC+xI5UbpoEnw+KI0U4tTVxAUJPh6nyZBU5Bw1113Ydy4cbjvvvtw6aWX4tJLL030uAiCIAiCIIgMgZXqGHRcUL0/EBAup2smQWufBJfs8a5emEnQJFxesmQJmpqaEj0WgiAIgiAIIgNxRBAtA+nVTI0FCWaljstxlhsxO1X5cXsTmoKEoUOHxrRAJQiCIAiCIPoGAWej8KUlEy53uLzw+lK7mHYrCZcN2vokyN2QKEgQueuuu/Df//4XdXV1iR4PQRAEQRAEkWGwIMFsCM8k5IlBAgDYnN4eG5MSyhaowv+TBWowmoKEBQsWYOrUqZgxYwZeeOEFbN26FadOncLp06fD/mmhrq4O3/zmN1FcXAyr1Ypx48Zh+/bt0v08z+PBBx9ERUUFrFYrZs+ejaNHj2p6LYIgCIIgCKJ7sF14qyk8SDDqdcgxCzLYVOsS2MI+EcJlNwmXwxkyZIhkefo///M/ER/HcRy83vgixtbWVsycORNXXnklPvroI/Tr1w9Hjx5FYWGh9JinnnoKf/rTn/DPf/4TgwcPxgMPPIB58+bhwIEDsFgsWt4SQRAEQRAEoZFo5UaAoEvodHnRZncDyO7BkQWj3HFZCBI8Ph4+Pw+9Tp1DJ1mgKvDtb387aRanTz75JKqqqvDKK69Itw0ePFj6f57n8eyzz+I3v/kNbrjhBgDAa6+9hrKyMixbtgy33nprUsZFEARBEARBKCMFCQrlRoAQJNS1OVKeSfBEaaYGCO8j26xueSxvptYb3Y00BQmvvvpqgocR4IMPPsC8efNw8803Y926dejfvz9+9KMf4e677wYA1NTUoKGhAbNnz5aek5+fj6lTp2LTpk2KQYLL5YLL5ZL+ttlsAACPxwOPp+dPVvaaqXjt3gzNa3KgeU0OmTyvPM/jxc9P4oJ+2bhqVGmqhxNGJs9tOkPzmhx6y7x2OYVuymaDTvG95FmE4KG5w9kj7zXSvLKFvR5+6T49H9ATdDhcMOnU6QvsrsCxHa7UrCm1oHacHM/zaaW0YOVCixYtws0334xt27bhpz/9Kf72t7/hjjvuwMaNGzFz5kzU19ejoqJCet4tt9wCjuOwdOnSsGM+9NBDePjhh8NuX7JkCbKyspL3ZgiCIHohTQ7gsV0G5Jt4PDKp99XhEgQRPxsbOSw9ocfYQj/uHhm+q/6PwzrsbtHha4N9uLQ8dUvPJ3bp0eDgsHC0D8PzA+P42WY9vDyH317kRZFZ3bE+ruWw4owQ/NwyxIeZZWm1pI6I3W7Hbbfdhvb2duTl5UV8nOaOy8nC7/fj4osvxuOPPw4AuPDCC7Fv3z4pSNDC4sWLsWjRIulvm82GqqoqzJ07N+rkJAuPx4NVq1Zhzpw5MBqNsZ9AqILmNTnQvCaHTJ7X/fU2YNdmeDkD5s+fl+rhhJHJc5vO0Lwmh94yr02bTgEnDmNg/0rMnz8+7P4N7v3Y3VKH/oOHY/6VQ5M+nkjz+vThLwCHHZfOmIZJAwN61wd2fgqb04sZl1yOIf3UaSYOrToKnKkBAAwfORrzpw9M7JtIEqyiJhaag4SOjg48//zzWL16Nerr64PKeRgcx+H48eNxHbeiogKjR48Oum3UqFF45513AADl5eUAgMbGxqBMQmNjIyZOnKh4TLPZDLM5PCw0Go0p/UKm+vV7KzSvyYHmNTlk4rz6OaF+1+Pl03rsmTi3mQDNa3LI9HllLQasZoPi+yjMEdZhnW5/j77P0HllmgSr2RR0u8Woh83phRec6vHJ2yr443heqlE7Tk1Bwrlz5zBjxgwcP34ceXl5sNlsyM/Ph9vthsPhAABUVlZqmqyZM2fi8OHDQbcdOXIEAwcK0dngwYNRXl6ONWvWSEGBzWbDli1b8MMf/lDL2yEIgiDiwCMK9Nw+P3ieT5qRBUEQmYNkgarQcRkIdF1uS3HXZaVmaoC867J6ATJ1XFbgoYcewvHjx/Haa6+htbUVAHDfffehq6sLW7ZswZQpUzBo0CDs378/7mPfd9992Lx5Mx5//HEcO3YMS5YswYsvvoiFCxcCELIT9957Lx599FF88MEH2Lt3L7797W+jsrISN954o5a3QxAEQcRB0A9jirunEgSRHsSyQC2wmgCkvk+CkgUqoK2hmstDQUIYK1aswFVXXYVvfvObYTtIkydPxkcffYSTJ08qioVjMXnyZLz33nt44403MHbsWPzud7/Ds88+i9tvv116zP3334+f/OQnuOeeezB58mR0dnZi5cqV1COBIAiiB/D08t0zgiDiJxAkRM8ktDvcPTYmJaRMgj5CJiGOhmpBFqi9cMNEU5Bw9uxZXHjhhdLfer1eKjMCgMLCQlx99dV46623NA3q2muvxd69e+F0OnHw4EHJ/pTBcRweeeQRNDQ0wOl0YvXq1Rg+fLim1yIIgiDiw+3lZf/f+34YCSLTqW9z4LH/HsCZFnuPvWasIKEgiwUJ6ZFJMIdmEgxUbhSKpiAhPz8/yGO1sLAQtbW1QY/Jy8tDY2Nj90ZHEARBpB0eKjciiLRmyZbTeOnzGvx786kee022uI6VSUilJsHr88Mv7nGElhuZxXIjJ5UbSWgKEoYMGYKTJ09Kf1944YVYtWoVmpubAQAOhwPLly9HdXV1QgZJEARBpA9UbkQQ6U2bWNLTau+50h5HDE1CoNwodUGCfFMjEcJleZfl3ngt1BQkzJ07F2vWrIHdLqSxvv/976OpqQkTJkzAzTffjLFjx+L48eO48847EzlWgiAIIg2gIIEg0hu7W1iwdzi9PfaaUrmRIXq5kcvrj2u3PpHIr1fGSJqEOMYmP56nF2ZVNQUJP/jBD/DSSy9JQcJNN92E//u//0NXVxfeeecdNDQ0YNGiRfjFL36R0MESBEEQqcftC2gSXBQkEETa4RCDhE5XzwUJrPTGalIOEnLMBuh1gtlNqrIJbFHPcYBBF2y8YxEzC1qFy72x9FJTn4SKigp8/etfD7rtZz/7Ge69916cP38epaWl5JtNEATRS/F4SZNAEOlMVwoyCbHKjTiOQ77ViJYuN9rsHpTl9bwjpdzZKHSdSuVG4WjKJERCr9ejrKyMAgSCIIheDJUbEUR643ALwUGHs+d27GOVGwFy8XJqbFAj9UgAtPVJkF//emNWVVOQcNVVV+Gxxx7Dhg0b4PX2XJRKEARBpB4KEggivbGnoNyIlemYI7gbAakXL7NMQqj9KaBNk9DbMwmayo02bNiAtWvXguM4WK1WzJgxA1deeSWuvPJKTJ48GXp95BOEIAiCyGzkmoTe+MNIEJmOpEnoUeGyqElQESS0pViTENpIDdBabkSahDDa29uxadMmrF27Fp9++inWr1+P1atXg+M4ZGdnY+bMmbjyyitxxRVXYMqUKYkeM0EQBJFCqE8CQaQ3XWK5UZfbB5+flwTDycTpjq5JAAIOR7ZUBwkKmQSzFuFyL++ToClIMJvNuOKKK3DFFVfg4YcfhsPhwIYNG/DZZ59h7dq1WLNmDT755BNwHEflSGmEz8/D4fEhx6zpYycIggAQIlzuhT+MBJHpsHIjQCg5Yjv4yYQtriM1UwNS31AtuiZBQ7mRbJOELFAjYLVaMWDAAPTv3x8VFRXIyckBz/Pw+3vfhGUy3/3nNkx7fA1au1IjGCIIondAmgSCSG8cIUFCsvH5eXjEMsRo5UYFKdYksEV9aI8EIP5yI57ng65/vfFaqHlL+fjx41K50WeffYbGxkbwPI+hQ4fia1/7mqRRINKHfXXt6HR5cbK5C4XZplQPhyCIDCWoT0Iv3D0jiEzG7fXD6w98RwWHI2tSX1O++x4tk5CXYk2CR4W7kdpMQqibEQUJItXV1airqwMAVFVVYd68eVJQUFVVldABEomD1c71xhOZIIieo7fvnhFEJmN3B2cOekK87JAtrJWcgxgFWcIGZardjRSFy6J1q1PlNS1Uj9Ub9VmagoTa2loAwOzZs/G9730Ps2bNQklJSUIHRiQetuPXG09kgiB6Dio3Ioj0Ra5HAICOHig3YrvvJoMOuigiackCNUafhL98dgxVhVm4bkJl4gYJdZoEtX0SXCFlSb2xT4KmIOHpp5/GZ599hvXr12PNmjUAgDFjxuDKK6/ErFmzcMUVVyA/Pz+hAyW6h7x2jn7UCYLoDhQkEET6EhYk9EAmQY39KRBwN4qWSTjTYsdTKw+jIMuYtCBBuU9CvOVGwY/rjddCTcLle++9F8uWLUNzczO2bt2KJ598ElVVVfjnP/+Jr371qygpKcHFF1+MX/7yl4keL6GR3t7wgyCIniPYAlW9EwhBEMnHERIk9ES5kdRtOYr9KaCuTwILatodHvA8H/FxWpDKjaK6G6ksNwpZS5G7UQgcx2HSpEn4+c9/jv/+979oaGjAH/7wBxQVFeHLL7/EH/7wh0SNk+gmQUFCLzyRCYLoOaiZGkGkL12hmgRX8uv/A0FCjEyCNdAnwe9XDgCYlSrPJ76EJ3oztfj6JLCxGfVCeZWfB7y9bH3VLcN8v9+P7du3Y+3atVi7di02bNgAu90OnudhNBoxefLkRI2T6CbytFhoHR1BEEQ8UJ8EgkhfQjMJ6VRuxNyN/LyglVDq3yBfo3S5vDEDj3gILOyVmqnF1yeBHSvXYkSLaC3v9vlhUDh2pqJZk7B27Vp8/vnn6OjoAM/z0Ov1mDRpkuRydMkllyArKyvR4yU0Iv/SkWUhQRDdgTouE0T6khpNgvCa5hgLeotRD4tRB6fHD5vDoxgkyHfy7W4fihM4To/KciOe58Fx0btUsw2SHLMhECR4/cjqRQ7zmoKEn//859DpdJg4caIUFFx66aXIzc1N9PiIBEGaBIIgEoU8SOiNjh4EkcmEWaD2gLsRs0C1RLE/ZeRbjXB6XGize1BVFH6/3F3IEUf3YzVEdzcK3Oby+mNmMFiFRpZJD44TyqN62/pKU5CwbNkyXHbZZSgoKEjwcIhkIS836m0nMUEQPQtpEggifQnPJKSPJgEACqwmNNpcER2O5MLh0PfSXdRYoAJC9UXMIMETcEoy6XVwef29btNEU+HU9ddfTwFChkGZBIIgEgVZoBJE+sIW1kyc2xOZBNaALJYmAQDyrML+dOQgQVZulOCxs/JIs4JuwKjXQS/2eFCTwXBJdqp6KejobeWX3VJX7Ny5E/fffz+uv/56zJ49W7r91KlTeOutt9DS0tLtARKJIahDKlkWEgTRDUiTQBDpi0MsN+qXawbQMxaoLpUWqMJjoguE5ZuaPZlJAAJBjhrxMltLmY06qe9Cb7NB1exudP/99+OPf/yj5GErF3jwPI/bbrsNf/zjH/HTn/60+6Mkuo38S0fuRgRBdAdyNyKI9KVLXFiX5plR1+boEeEyc1RSU24kBQkRrEaDMgk9qElgY+t0edVlEjwBO1WWtelt10NNmYRXXnkFf/jDH3Dttddiz549WLx4cdD9gwYNwpQpU/DBBx/EfeyHHnoIHMcF/Rs5cqR0v9PpxMKFC1FcXIycnBwsWLAAjY2NWt5Gn0IuBKKdP4IgugNpEggifWG772W5FgCC1WiyYQt+NUGCNUbTMvntDndix87cHZUsUAHAahJuj6vcyKgLlBv1suuhpiDhL3/5C0aNGoV33nkHY8eOhckU7vc0cuRIHD16VNOgxowZg7Nnz0r/vvjiC+m+++67D8uXL8fbb7+NdevWob6+HjfddJOm1+lLkCaBIIhEQeVGBJG+sIV1WV7PlRuxhb26TILYtCzCQlyeYehyJTaT4FFbbqSizMmtpEnoZesrTeVGBw4cwN133w2DIfLTy8rK0NTUpG1QBgPKy8vDbm9vb8fLL7+MJUuWYNasWQCErMaoUaOwefNmTJs2TdPr9QUoSCAIIlGQcJkg0he7VG4kZBIcHh88Pn/E3fNE4EikJkGeSUh0uZEvUCKkhDVGKZQc5hpp0uukue1tfag0BQkGgwFutzvqY+rr65GTk6NpUEePHkVlZSUsFgumT5+OJ554AtXV1dixYwc8Hk+QSHrkyJGorq7Gpk2bIgYJLpcLLpdL+ttmswEAPB4PPJ7kW4OFwl6zJ1/b7gp8Xk6PNyXvO9mkYl77AjSvySGT59UdpHHypd17yOS5TWdoXpNDoue10yUcpygrsMRr63SiICu8cVmicIivadTFfh8sjrC7lNdgdnfgtk6HW/O8KM0rK73Wc7zicVlGQM3rMuclox4w6kVXJGdq1pXxonaMmoKEcePG4dNPP4XP54NeH55astvtWL16NSZNmhT3sadOnYpXX30VI0aMwNmzZ/Hwww/j0ksvxb59+9DQ0ACTyRRmv1pWVoaGhoaIx3ziiSfw8MMPh93+ySefpLQr9KpVq3rstXae5QAIn9WZurNYsaKux167p+nJee1L0Lwmh0ybVz8PeP2Bn472zi6sWLEihSOKTKbNbaZA85ocEjWv9Y16AByO7t8Do04Hj5/D8pWrUGxJyOEVqTmjA6DDiSOHsKLjYNTH1oqPPXysBitWHA+7//hJ4X4AOHDkOFZ4tJWuM+Tz2nBOmJt9u3dBX7sz7LGdbcJrb9m+E/xpPux+OYdOCY+tO30KnV0cAA5btu+A52T056UDdrtd1eM0BQl33XUXvve97+EHP/gBnn/++aD7bDYbvve976GhoQHPPfdc3Me++uqrpf8fP348pk6dioEDB+Ktt96C1WrVMlwsXrwYixYtChpjVVUV5s6di7y8PE3H7A4ejwerVq3CnDlzYDQmL7KXc2Z9DXBS+KIVFPfD/PnxB3DpTirmtS9A85ocMnVeXV4/sHm19LfeaMb8+VekbkAKZOrcpjs0r8kh0fP61xMbgc5OXDJ9MpbX78O5Tjcunn4pRlXkJmC0yixr+RJoPo9JE8dh/qQBUR97Zn0NPq49itLKAZg/f2zY/Svf3A2cEwxpSvtXYf78MZrGpDSv/+/0ZqDDhmlTLsaVI/qFPee/7btwsK0Jw0aPxfwpVVGPv/2/h4D60xg5fCg8dTYcszVj7PgJmD+xUtN4exJWURMLzUHC6tWr8fLLL2Pp0qXSzv6UKVNw8OBBdHV14c4778TXvvY1LYcPoqCgAMOHD8exY8cwZ84cuN1utLW1BWUTGhsbFTUMDLPZDLPZHHa70WhM6YWuJ1/fKwtsPX6+V1/gU/259lZoXpNDps2ryx8sgnT70vd6kmlzmynQvCaHRM2rQywHzLOakWsx4lynG04fkvqZucRFRrbFFPN1sszC/ZGuHR5/YMHi9Kq/vrTZ3cg2G8K0F/J59YjObFlm5XFmm9njYs+XVxyn1WSUdBY+nsuI74baMWpWsSxZsgR///vfMXjwYNTV1YHneWzfvh3V1dX461//in/84x9aDx1EZ2cnjh8/joqKCkyaNAlGoxFr1qyR7j98+DBOnz6N6dOnJ+T1eituEi4TBJEAPCHXD7qeEER6wRyBskwG5FiEvWCmU0gWTk8cFqimxFugNtqcmPr4Gtz16raoj2PXK6YhCIWNP76Oy7pe23FZczM1ALj77rtx9913w+FwoLW1FXl5eZrFyoyf//znuO666zBw4EDU19fjt7/9LfR6Pb7xjW8gPz8f3/3ud7Fo0SIUFRUhLy8PP/nJTzB9+nRyNopBkLtRLzuJCYLoOUI7itL1hCDSC7awzjLpkSsGCcluqJZQC1R5MzWVHZcPNXTA5fXji2Pn0W73ID+CSFtyN4phgRp3kEDN1ALo9Xrcfvvt0t9WqxWVlZXdDhAAoLa2Ft/4xjcwYsQI3HLLLSguLsbmzZvRr59QO/bMM8/g2muvxYIFC3DZZZehvLwc7777brdft7fjktl59baTmCCIniM0KPD5efj86S/UI4i+AM/zUpfiLJMeOeYeChJYM7UIi285FkN0C9SgPgkqg4SWLsHBkueBbSdbIj4uVsdl1kwt0tjkSB2XDfqABWovW19pyiTk5eWhqiq6oEMrb775ZtT7LRYLXnjhBbzwwgtJef3eitx3mIIEgiC0wmp6dZzgdAQI1xRWQkAQROpwef3gxe+l1aRHjlhj35nkrsus+Zi6TEL0XgQuDeVGzZ0Bm/ctNc2YPbpM8XFsk8McIUiIFcBEOlZvbaamKZMwZcoU7N69O9FjIZKIPLrtbZEuQRA9Bys3yjYH9ph62w8jQWQqXbJgIMtkkJUbJVmTIF4D1GwWBJqpRdAkeOMvN2rpkgcJKjIJCvb9QGD8DhWvy3oumI29V5OgKUh46KGH8Omnn+K1115L9HiIJEHlRgRBJAJ2/bAa9eBE7Z/Ll9iuqARBaIMtqs0GHfQ6TgoSOpOuSWDlRuo1CZEW4sHC5fiDhH117RGDoljlRlqEyyZ9IEgINXbIdDSVG61atQpXXHEFvvOd7+DPf/4zJk+ejLKyMnBcsFqc4zg88MADCRko0T1c5G5EEEQC8MiEfya9Di6vn64pBJEmOGR6BAABTUISy414npdelwUA0WALcVeEciN5qU+X2nIjWZDg54Htp1pxyZDCoMf4/bxkWxpbuBz7miYJl416mPW9M5OgKUh46KGHpP/fsWMHduzYofg4ChLSB3mNn6uXncQEQfQcTJPAds8oSCCI9IFlErJMwvIu1yJoEpIpXHb7AjoIsxoL1BjlRvJNTafHD7+fh06nbFnKYJmEgiwj2uwebDnREhYkyBfwkSxQJXtWFRkMtzeQtemtmgRNQcLatWsTPQ4iyci/HG6vHzzPh2V+CIIgYiHPJJgNOnSg9+2eEUSmYncF7E8BBPokJDFIkC/2rfEIlxVKevx+Pmyh7fD4gjRQSrAgYd7ocizdfgZbapoBDA16jPw6lUgLVJNBJ7kbUZAA4PLLL0/0OIgkE5rW8/h4mAwUJBAEER/sh9ao773e4ASRqQQyCcJiN9fMmqklL0hgAl4dF3mHXg4rSfL6eXh8/qAOyUrGKl1ub8wgoblTsEC9epwQJOytbYc9pFRJfp0y6aNrElRZoCo0U+ttlRqaOy4TmYUrJK0XqRaQIAgiGkyYZ9RzvTbFThCZCuuRwMpmesLdyCHrtqymQkFukxq6GJf/zWxKY4mXPT4/bGKmZPyAAvQvsMLr5/Hl6fagx7llQuNI45RE1WosUKUgQR/1Wtjc6cJv39+HA/W2mMdMNyhI6COERuf0o04QhBaCMgkUJBBEWsH6CmSLmgSp3CiJmQRWbqSm1AgI7lEQqktg9qcGHSfpKWLZoLaKpUY6DiiwGjF1cBEAYGtIU7VYzkaATJOgKpMg0yREyaq+v6se/9x0Cvf8a7tqt6Z0gYKEPkJo5oBqiAmC0EKQu1EvTbETRKbS5QrOJPREx2WnLJOgBo7jpB370MU4q3qwGPVSyVSsIIE5GxVmmaDTcZg6RAgStp1sDXqc26ciSDCq65PA87xiuZFH4VrY7hCyOLWtDvz506NRj5tuUJDQR6BMAkEQicDjFWxMSJNAEOlHqAUq241PpguZU9ZUTC2Rav+dst35QJAQPcBhouWibBMAYOrgYgDA7tp2yNf68nKjSMiFyzyzbFLA6+cDjk4GvZQdUZpjeenSi+tP4GhjR9T3k05QkNBHCNUk0I86QRBaCJQbkSaBININtqBmFqg5MsFvskqOHHE0UmOwx4aVG8kyCdY4MwksSBhYnIWyPDM8Ph4nOwPaA7ZZaoxi2mIRX9PPR6+4kG+8xuq4zLpg6zghuPj1sn1RA5B0QlWQYLPZ4Ha7Yz+QSEuEtFjAfQBQdhAgCIKIhSdIkyD8oFKQQBDpASs3Yrvweh0n/X+ybFAlTYJJfZAg1f57lYXLZqNO0lXEKv1pEZ2NinOEIIHjOCmbcMwWCAikUkkVmQQAcLqjBAmy7IBJH90ClY3/m9MGwmrUY2tNC975si7qe0oXVAUJhYWFePLJJ6W/77rrLnzwwQdJGxSRWLx+HmKTQWlXgYIEgiC0IP+hNfXSLqMEkak4QixQAZnDkSs5DkdsE1JNt2VGJOcitjaxGNRnEkLLjQBIuoTjsiAhIFyOHMwY9ToYxN3U0ABGjjyjqtNxUUsv2fiHlebgf64aBgB4fMVBSXCdzqj6RDmOg98feOOvvvoqdu3alawxEQlGftLmWY1htxEEQaiFdVw26nVR63AJguh5AhaogTKjZIuX2UI/rnKjSJoETyDgUKtJCJQbmaXbpg0RMgknOwK7/mrcjeRji5bBYCXcZvE9SyYOEfo8AEIJ2PcuHYzhZTlo6XLjyZWHoo4jHVAVJFRWVuLYsWPJHguRJOQnLbtY0M4fQRBacMvqekmTQBDpRcACNbBgzxHFy8krNxIX9vGUG7EgwRuqSWDCZfXuRiyTUCzLJAwpyUZZrhlensNnR84DCKx7zFHKjQBZkBDFBtUVEnBE0yTIsztGvQ6P3jgOAPDW9jM402KPOpZUo6rj8pVXXonXX38d58+fR0VFBQBg2bJlOHnyZNTncRyHl19+uduDJLoHSwUa9Zx08tOPOkEQWgjSJOiFrAJtOhBEehBqgQoAeUnuleCUlQipRbJADS03koTLOkl8HVO43BlebsRxHG6cWIm/f16DJdvO4NqJA1RnEqym2A3V5D0S5P9VskBl42efyZTBRfjFvBGYMbQYVUVZUceSalQFCU899RQaGxuxatUq+P1+cByHXbt2xSw5oiAhPZCnxWjnjyCI7iDXJHgNQpBAGieCSA/skgWqUrlRcjQJ8hIhtUjlRt5QTUKg5wLLJDhilhuJwmVZkAAAt04egBc/P4GNx1tQc75LfZDAxhYlOAl0WxYzCfrIG7AOhc9k4ZUXRB1DuqAqSCgrK8PKlSvh8Xhw9uxZDBo0CPfeey9++tOfJnt8RAKQN/wwS3VzmdX1jyCI9ECuSTCJQQJtOhBEeuCQ6t9l5UYsSEi2BarKZmryx4ZrEsItULvUCpdzgoOEAYVWjCrgcaCNw+ubT2FgSTaA6O5GQHCvhEhELDdS0iS4wj+TTEFVkMAwGo2orq7G5ZdfjokTJ2LgwIHJGheRQNS2DicIgoiFvGupj6cggSDSCbuiu1FyNQmsWsGqKUiIpEnQIUuFgNjn59EmdjQuCskkAMAl5TwOtAFv76jF9y8fAgAwqhUuqyo3Eh5r1AuOSF4/D7+fh04XcFVScpzKFOIKEhhr165N9DiIJCJlEox6qSMi1RATBKEFjzegSfD5mSaBMpMEkQ4EggRZuZElue5G2sqNlOv+nfJyIzPTJEQed6vdLXU+LswKDxJGFfDoX2BBXZsTy3YKvQliZhJMygGMnLByI1ng4fb5YdEJx+B5XrEELFPo1oi7urqwbNky7Nq1CzabDXl5eZg4cSJuvPFGZGdnJ2qMRDcJaBIok0AQRPfwyPzB/TxdT4i+i9PjwxMrDmLO6HJcMqwk1cMBIO+4LMskmJMrXE5kuZG0XgmyQI28CcFKjfKtRqmhmRwdB9x68QD8cfUxHGnsBKDCAtWgvtyIbbzKj+ny+gMmMT6/tJmSZe4jmQQAeOedd3DPPfegra0tqL00x3EoKCjASy+9hJtuuikhgyS6R1C5URQvX4IgiFgwTULQzhldT4g+yIZj5/HPTaewt649LYIEv59X7H6c22OZBA0WqKHlRiyToNIClTkbhYqW5dw8qT/+tPa4dO0yx3Q3ii1cZsEM23iVZyfk10O7K3CMrDjmJ11QnxuSsXHjRtx6663o6urC9773PSxZsgRr167FG2+8gbvvvht2ux233norNm3alOjxEhoIpMXI3YggiO7hkpUbRfMGJ4jeDlt0t9mT4xoUL/Kd72zFcqNkuRsFxMZqYeVGrgjCZXOQBWrk4Eap23IoxTlmfGVshfS36mZq0TIJvsC6ChA2yFmgILdBZaVGJr0OhhhlTumIpkzC448/DrPZjA0bNmDChAlB933961/Hj370I8yYMQOPP/44li9fnpCBEtqRq/CZTRdlEgiC0IK8TwKT5tGmA9EXYYtIW5J26OOFdfbluGB9QE6Sy426Y4EapknwhGcSogmXW5j9aU7kIAEAvjm1Gst31wNIkLsRE1jL3rPJoIPb5w+6HjK3KWsGipYBjZmETZs24etf/3pYgMAYP348brnlFmzcuLFbg/v9738PjuNw7733Src5nU4sXLgQxcXFyMnJwYIFC9DY2Nit1+ntKJUb0Y86QRBakGsSqHyR6MuwxWuydujjhY3HatSD4wLuOpK7UbKDhHiaqRkiaBK8gaxElgoL1GYpk2CO+npTBhdheFkOgDiaqUUrN/IGlxvJjyvPrLJSqey+FCTY7XaUlZVFfUxZWRnsdu3tprdt24a///3vGD9+fNDt9913H5YvX463334b69atQ319PWkfYiAX2Jilk5jcSAiCiB95MzXadCD6Mmyn2eX1p8V3QMn+FOgJTUK4DiIWlggOQvKshFUsN4qeSYitSQCEcqCHrhuDSQMLMX9cedTHWiOIquW4Q4TLQMAGVX4uKHXAziQ0BQmDBg3CqlWroj5mzZo1GDRokJbDo7OzE7fffjteeuklFBYWSre3t7fj5ZdfxtNPP41Zs2Zh0qRJeOWVV7Bx40Zs3rxZ02v1BajjMkEQicItb6amJ00C0XeRLyLTIZugZH8KyMqNkhUkeDWUGxmULVDl6xW2++72+eGNcI1pVqFJYMy4oATv/HAGLijNjT62OJqpmWXZE6XMqsPD3KYyz/4U0KhJuOWWW/C73/0Od9xxB5544glUVlZK9509exaLFy/Gjh078MADD2ga1MKFC3HNNddg9uzZePTRR6Xbd+zYAY/Hg9mzZ0u3jRw5EtXV1di0aROmTZumeDyXywWXyyX9bbPZAAAejwceT89/sdlr9tRr213C6xh1gIETfuCdbl9K3nsy6el57SvQvCaHTJ1Xt/jDqYMfrKLB5Umv60mmzm26Q/MaTKcsMGjtdCLPrE2Ymqh5tdmFdY7VqAs6lkVcx7p9fnQ6XDHdfeKFuQDpwat+DwYdW4t4g57DFtUGHS+tVwDAZndKZVNymjucAIB8iz7stbXOK4t17C5vxOc63MLtBi5wfKNODHxcbum2DrsQxFhCPpNUo/pz0nLwX/7yl1i5ciX+9a9/YenSpbjgggtQVlaGxsZGHDt2DG63G1OmTMEvf/nLuI/95ptv4ssvv8S2bdvC7mtoaIDJZEJBQUHQ7WVlZWhoaIh4zCeeeAIPP/xw2O2ffPIJsrKy4h5jooiVjUkU+0/rAOhwtu4M/C08AD1O19ZhxYozPfL6PU1PzWtfg+Y1OWTavLa26wFw+HI7u0br0dJmw4oVK1I5LEUybW4zBZpXgcMnhN9WAFi55jNU5XTveN2d1z0tHAA9XF0dQd9HwaZfWO4t++9K5IavtbuFzS5cE7Zu+gKnrOqec9wmjKm5PXis51qEY+3+cjscx3jooIcfHJZ/tAoFCrKDUw3C44/t34UVdTsVXyveeT1yTpjHM/UNEa9rx8TP/lTNMaxYcRQA4BLn4YtNW9B8UAhwNjcJx+pqa06ra6RaOYCmICErKwvr16/Hk08+iddeew0HDhzAgQMHAABDhgzBHXfcgfvvvx9mc3QhSShnzpzBT3/6U6xatQoWi0XL0BRZvHgxFi1aJP1ts9lQVVWFuXPnIi8vL2GvoxaPx4NVq1Zhzpw5MBoT/G1VYM/Kw0DdKQwfOhhDSrLxn5oDKOxXivnzL0r6a/ckPT2vfQWa1+SQqfP69OEvAIcdl8yYBo7j8PyBrTBZszB//qWpHppEps5tukPzGsza/+wFGs8CAMZfPBXThxRrOk6i5tWz+yxweC8qy4oxf/7FQff9ZucadLl8mHbJFRhYnNjN0V9sWw3Aj3lXXYnKAnVRwr46G/60fzP0Jgvmz79cuv2Phz8HHA5cPnM6LqouwG92fopOlxfTL70cg0vCm/T+bu9nANz4ypUzMboieD2ndV65fQ14/dge5BQUYf78KYqPWffuPqCxHmNHjcT8ywYDAF4+sxl1dhsmXjQJV40sBQCc33waOH4IA/tXYP58ZbOfVMAqamKhuUjKbDbjwQcfxIMPPoiOjg6p43JubvRar2js2LEDTU1NuOiiwOLV5/Nh/fr1eP755/Hxxx/D7Xajra0tKJvQ2NiI8vLIQhSz2awYsBiNxpRe6Hrq9Vl5XJbZCKvZKN3WWy/yqf5ceys0r8kh0+bVK3YPtZpN0In1Rh4fn5bvIdPmNlOgeRVw+QLlMHZP939TuzuvTN+bbQ4/Tp7FiC6XD05fYn/7/X5e0jjmWM2qj51jFTQETq8/6Dmsnj/bYoLRaES2WY9OlxduPxd2bL+fR6vYo6IsPzvia8c7r7lWsziWyNc1pre2yubaYhCW1H7opNvYOZJtSa/vjNqxJERJkZub263ggHHVVVdh7969Qbd95zvfwciRI/HLX/4SVVVVMBqNWLNmDRYsWAAAOHz4ME6fPo3p06d3+/V7K26p6YdOEtmQZSFBEFpwy/ok6HXhbh4E0VdwpJ1wmYlkw510mHjZluBxMtEyEG8zNWUHoUBjNqGMSxD8uhRFxDanBz5x06IwO3ELcFXCZdYnQabvMBrCr4eOCI5TmUJaya1zc3MxduzYoNuys7NRXFws3f7d734XixYtQlFREfLy8vCTn/wE06dPjyhaJmTtw6lPAkEQ3USyQDVw0OvoekL0XeTWnMmyF42HSBaoQKDrcqIdjuQWptqCBD94npf6OjilxbdwP7Mj7VLo8cCcjXLNhiCXoe5iVdHETb75ypDc3mTXw0iOU5lCxo36mWeegU6nw4IFC+ByuTBv3jz85S9/SfWw0hq5VRcFCQRBdAeP1ERID73oC+4iC1SiDxKcSUinICF8aZeshmpsUW+SZRbVILdLdXn9sBj14Hk+qJkagKhdl1mPhKIY3ZbjRU2fBMmq1ahggRrUTC1ydicTSPsg4bPPPgv622Kx4IUXXsALL7yQmgFlIEEdl8nXnCCIbuBhfRIMHAyyTIJ8N5Ag+gLBmYTklRu1dLnxx08O444ZgzC8LHJpd7QFaa45OQ3VpJ3/OHokAMFZB6fHB4tRH1QGLZUbieO2KwQJzZ3qeyTENzadNK5IsHVVcMdlsa+DYiYhM4OExJrlEmmJvONyoNkHdVwmCCI+eJ4P0iSYZKl2j0zESRB9gZ7KJLz0+Qm8vuU0/vrZ8aiPYwtSpe6+UkO1BGcS2BxY4yg1AoI1TaxkySUrXWLlQ1nice0KC3a13ZbjxSrTJPC88nVNKjcy9u5yIwoS+gDyDoZmKjciCEIj8kDAqNcF1eNSdpLoa8h3mhMtCJaz+UQzAKC+zRH1cZJIVmHBnmtJViYhuDwoHkLLepgIWscBRrGUke3A2xWCm5YuoXlcwjMJ4mv6+cjXtcC6Sp5JEP7f4+s9wmUKEvoA8nIjChIIgtCK/MfPpNcFpdrpmkL0NRIlXO5yeRHp6Xa3F3tr2wEATR2uqMeRyo3M4bvWOVKQkNhghrn8WOIsN5I/h2UjXLKAg5UusqyIYrkR0yRkx9eTKxbyrIjTHSFI8IYHCUrrqy7xM1HK7mQCFCT0AUi4TBBEIpAHCUY9B52Og4FsUIk+CM/zQSUwWhffbq8fV/95I/6wV6/4HdpxqlXqTdLQ7oxY/gIAXdHcjZJUbsR2/7VkElhJUWgmQX6sbHHcSnakySo3Mup10nUtkg2qW7auCjxPvBb2okyC5iKpmpoaPPfcc9i9ezfq6+vh8YR/QTiOw/Hj0WvoiOSjpEmg0gCCIOKFXTc4DlI9scmgg9ftoyCB6FO4vH7I1+taMwnnOl042+4EwGHbqVZcMTK4MeyWEy3S/zs8PnS4vMizKPcEiLYgZc9JtAWqw92NciNTwAZV+G947wG2q8+yJHIkd6MEBwnsdTtc3ohBgrxCg6G0CZvpmgRNo165ciVuvPFGuN1uGI1GlJaWwmAIP1S0iJfoOdyytBgrD/D4ePj9PHRxWJYRBNG3kZyN9DqpHMBk0MHu9sHtIzMEou8Q6nxj07j4lmcg1hxsCgsSmB6B0WRzRgwSAu5G0cqNkuNupCVIkFyExAW3kr4hoEmI4m6UYAtUQNAldLi8EXslsM1XU1CfhPBmtZnubqQpSPjlL38JvV6PpUuXYsGCBdDpqGopnZGsugzBbiRunx8WXWaeuARB9DyBHgnhjh7UxZ3oS4TuMGstN5Iv2lcfOodHZFbCDrcPu2vbAAgWph0uLxraXbigVNkGNVomgZUbdSSr3MigQZPAyo3EcSvtzmdF0SQkq9wICA9gQlEqN1LOJGR2nwRNq/sjR47gtttuw80330wBQgYgdzeSBwn0o04QRDx4JPvTQAaSdE5EX4QtyFlrEJfXr+k7IA8uzrY7sb/eJv2983QrPD4eZXlmTKgqAAA02pwRjxVNk5BvFbIP7XZ33GOMBpsHbZkEMUiImkkQ+ySEBGU8zye93AgIBDByvD6/pBNRLDcSr5M8zwcsYvtSkFBeXg6LxZLosRBJwqVQbgTQjzpBEPEh75HAoCCB6IuwxV9RVmCBqiWbEFr+s+pAo/T/m2sEPcLUwcUoyxPWXI0dkYMEh9QnIbxIpDRPcABq6nDB709cKThbX8TbJwGQBQlRNAmRLFA7XV7pelScYHcjILhXQihyTadJyQLVy95PQLeSnaGaBE1Bwm233YaPPvoITmfkk5VID/z+QPMjs0GoIybxMkEQWpBrEhjUxZ3oi7AFeY7FIC1ktdT7My2DjhO+W/IgYYuoR5g6pAjl+eIi36Zsg+r1+aXvYLbCrnVJjhkcB3j9PFoSmE1wJsIC1c0yCeFZiUgWqCyLYDXqk7JLb4kWJMg2RIIsUEOuhXKxtZYgKh3QFCQ89NBDGDlyJObNm4cNGzags7Mz0eMiEoT8h9ssnqRmha6ABEEQsWDlRiYFb3B5t1SC6O3IOw13p1EZyz6MKuCh44ADZ22obbXD6fFh55k2AMGZhIZ25c1ZeTmO0qLZqNehJEcINKKVLMVL94TLweVGLCshDzgiWaA2J7HUCAjMoZJwmY1Tr+NgkG2YGA3BdtB2dyCAylSTGE1BgtFoxP/8z/9g7969uOyyy5Cfnw+9Xh/2T8nxiOhZgtucCx83lQcQBKEFlkZX1CRQJoHoQwRKe/TIFd2GulNuVGIGLqouACC4HO0+0wa314+SHDOG9stGaW70ciPm/qPXcUFlxXLK8hIfJDgS4W4UUm4UlEmIYIHaIjobFSfB2Uj+uqEuVoByt2Ug4G4UGiRkqv0poNHdaOnSpbj99tvh9/sxZMgQVFRUUECQprhkbc4NMl9z+X0EQRBqcCtkEmjTgeiLyDMJDC02qCywsBiAaSNLsf1UG1YdaES7Q7h96pAicByH8nwhSIhUbiS56Mi6FYdSlmvBPtjQGOEYWlASG6uFzR3r2qzUxTiSBWoyRcvysSmVG8kdI+VIa6uQcqNMdTYCNAYJjzzyCPLz87Fy5UpMnjw50WMiEoi827Lc1xygH3WCIOIjqiaBridEH8IpCxJYyUl3MglWPY/Zo/rhyY+PYPOJZtjEY00bXAQgOAug1ONI2rU2R16QljLxc1LKjbRoEoIX4kqZBLm7ES+zh012uZE5RFQtRymYAcLXVpnebRnQWG5UU1ODW2+9lQKEDEDebZlhpiCBIAgNeKK4G7mo3IjoQ0jWn6buahKE51j0wKDibAztlw2vn8ee2nYAwNQhxQBiC4/ZQjtaaUu5FCQkLpPAMh6sD0M8WEJKegKaBFmQIAY9PpkJCxAIdPrlJt7ZCIiVSQjvkQDIN0yE53RFcZvKFDQFCVVVVfBRd82MQEqL0Y86QRDdRBIuB11PgutwCaIvYJdlEvISIFy2iuvIOaMDHZeLsk0YVpoDQAjMmdWnUiagS7QIjeaikwxNwolzXQCAwSXZcT83kgWqvDFbluz9yEXEx88JhjlDNLyuGqymYOclObHKjVjGlZUbKblNZQqagoS7774by5cvR0tLS6LHQyQYpUwClQcQBKEFl5Jwma4nRB/EKSslSYRw2SKuI+eMLpPumzKoKEhfEM0GlS1ms6OUG5UluNzI7vairs0BABjaLyfu50sWqCHlRmZZYGDQB/o7dckW7Cw4GaLhddUQTbjsjlRupO995UaaciBf+9rXsGHDBsycORO/+c1vMGHCBOTl5Sk+trq6ulsDJLqHvNsygzQJBEFoIVq5EV1PiL6EXLjMSm26U25k1Qu7zxdWFaAkx4zznS5MHVIU9FgmPG5QWOTbVZS2lEqZhMSUG9WcFxbqhVlGFGrQBlgMwQtxZwTXIKtJD7fDD4e4M+9w+7oVnKgam6pyowiaBEm4nPnlRppGPmTIEHAcB57n8e1vfzvi4ziOg9cb/5eGSBwsLRbcOlx0FKAfdYIg4kCyQFXok+CmElSiDyG3/pQ0Ca74Mwk2mbsRAOh0HP736pH4YHc9bpzYP+ix0YTHrPwpK0q5EdMkNHe54PH5g4J9LbDdfK0LdYvkbhTZAhUQynXaHR5p0c2Ck4IsY0r7JEQqNwpYoAYcpzIVTUHCt7/97YgWW0R6oRTxknCZIAgtsFpbJY0TXU+IvoTDLZzvwX0S4tsU9ft5dDItgWwd+bVJA/C1SQPCHl8WJRNgd8W22yzMMsGo5+Dx8TjX4UJlgTWu8YYi6QL6adMFsLr/8GZq+pDHBXddZq+brCwCEF247I4kXA4LEmI7TqU7moKEV199NcHDIJKFkgo/cCLTzh9BEOpx+0iTQBBAsAUqyyTE2yehy+0FL8TdkiYhGuXRMgkqFqQ6HYfSXAvq2hxotDljBgkurw9PrDiEK0eW4vLh/cLu764ugJUbsd36SHaqkg2quDMvvW6SRMvCGIKzHHKUKjQA2bXQ5wfP87JmapkbJHQv10SkPS5JCCTLJOiD6+YIgiDUEFWTQNcTog/BFqxWox55Vm3CZZZ5MOo5qGkzEE14rMYCVTiGel3Cir1n8erGk3hk+X7F+7u7oy/1IhAX3c4IO/SRMgnJEi0DMSxQPdHLjQDheujoBR2XKUjo5SiVG1F5AEEQWlAKEti1hTRORF9CEi53o08Ce3yO2QA1FdzRhMfyoCUa8Tgc7T4j9Go4fq4rLADieV7SBmguNwqxQHVFyCRkhwQJJ86z4CT5mQTFciOfcjAjX2d5fDy6VH4m6Yxm4bIaOI7D8ePHtbwEkSCUaucoSCAIQguSJoE2HYg+jkNc2Ap9ErRmEoTHsyAjFtGEx3aXutKWeIKEPbVt0v/vrWvHjKEl0t8NNifsbh8MOg7VRVmqxh8KCwaiNVMDAjvxDrfQdTnZ9qdADOEyc2EKCWbkn4fb61dlS5vuaMok+P1CvVXov7a2Npw8eRInT56Ey+WC3x//j8Zf//pXjB8/Hnl5ecjLy8P06dPx0UcfSfc7nU4sXLgQxcXFyMnJwYIFC9DY2KjlbfQJlFT4rG6Odv4IgogHt1KfBAoSiD6I0x2eSXB6/FK2TQ0sk6A2SGDCY54HznUEZxMCmoTox1Jrg+r1+bG/3ib9vVfsAM043iQs1KuLszS7JIV2XA40U1MuN+pye4OCk4HF2oITNUTrkxBJk6DXcdDrhGuj2+vvFRaomj7ZkydPoqamJuxfS0sLTpw4gRtvvBGDBg3C/v3KdWzRGDBgAH7/+99jx44d2L59O2bNmoUbbrhBOtZ9992H5cuX4+2338a6detQX1+Pm266Scvb6BMoncws+qUggSCIeFDUJJDGieiDyC1Qc2QL83hKjpj9aW6MhT2DCY+B8EyAGgtUIJCNaOqInkk40tgZtEbYExIksJKfISXad/NZkODx8fD5eVkztVDhcmBXn2URqou0BydqiKpJiGCBCgQbOaj9TNKZhM/woEGDsHTpUrS2tuLXv/513M+/7rrrMH/+fAwbNgzDhw/HY489hpycHGzevBnt7e14+eWX8fTTT2PWrFmYNGkSXnnlFWzcuBGbN29O9FvpFSi6G+mF/6cfdYIg4oGaqRGEgLyZmkGvkxay8ZQcBTIJRtXPiZQJUGOBCgTKjRraowcJe+vaAAT0ALtlpUcAcLxJ1AWUatcFyGv1nR6fpE0IzSQE3I183bZdVYvFFOgGzTMLKpFIFqiA3MjBp/ozSWeSkgMxGo2YM2cO3nrrLTzzzDOaj+Pz+fD222+jq6sL06dPx44dO+DxeDB79mzpMSNHjkR1dTU2bdqEadOmKR7H5XLB5Qp8oWw2IYXm8Xjg8cTf/KS7sNfsidd2iM1djLrA6+k54YR3ur0pef/JQsu8/mvzaZxstuPeqy5QTPmearHj+U+P4/oJFbh0WInCEXo/PXm+9iUycV6ZsNDA8YHrCXjpvnR5L5k4t5kAzWsAJhQ26YTvQq7ZALvbh9ZOJyrz1DX4ausS1iXZ4oJUzbyW5gjHrm/tCnp8l7ggNeujH6dIbMjQaHNGfdzO060AgOsmVODNbbWobXWgsa1Lal52TAwSBhZaNZ8POtniu8PulCof9Jw/6JispL/T6cHRxg4AwKDirJiv253z1QAhEOB5oMvpDqrGYJ2fjbLrIMMklmJ2Od2BcyTGZ5IK1I4naYVSdrsdLS0tmp67d+9eTJ8+HU6nEzk5OXjvvfcwevRo7Nq1CyaTCQUFBUGPLysrQ0NDQ8TjPfHEE3j44YfDbv/kk0+QlZW8mrZYrFq1KumvcfSEDoAOp2qOYcWKowCA42c5AHqcPF2LFStOJ30MPY3aeeV54Iktenh4Dh/vPoXvjfChVGYbfbiNw6tHdLD7OHx5rB4/G9+3+0r0xPnaF8mkeT1dK1xPjhw6iBXtBwAA+1uF60lTcytWrFiR0vGFkklzm0n09XnlecDh0gPgsPHzz7DfBMAr/L163QacyuejH0Bk12nh+9TSWA8MVjevjhbhORt3HUBxyz4AgM8PnDwnvP6BnVvRcTTK870AYIDN6cWy5SsQaZN7wwHheNb2Uyi16NDk5PDKsjUYVSi8twNnhPubju3Gisbdqt6vEgZODy/P4cOP18DPC0vS9WvXIEu2Oj1VL1xjjp08jS4PAOjQWX8cK1YcU/UaWs5XIWkqDGL5ipVB46kRP7fjRw9jRdeh4Od5hHlZt/4LtHUK/7998wbUpW6pqYjdblf1uKQECZ9//jneeOMNjBgxQtPzR4wYgV27dqG9vR3/+c9/cMcdd2DdunWax7N48WIsWrRI+ttms6Gqqgpz585FXl6e5uNqxePxYNWqVZgzZw6MRvVpRi2se3cf0FiPsaNGYv5lgwEArVvP4L2TB1FcWo758ycm9fV7knjn1e72wrP5UwBAo4PDnw9Z8Owt43HJBcV4ddNp/G3zYfjFa32TW495X5kriZL6Ej15vvYlMnFeP2zbBTQ3YeL4cZg/WegIm3+8GS8e2oGsnFzMnz8jtQMUycS5zQRoXgXcXj/8m1cDAK6ZNwd5ViNeqd2CxjPtGD1hEuaMLlV1nK3LDwJ1ZzBm2GDAe1zVvJ5ZX4P1DUeRWzoA8+ePBQBsOtEMx5YdKMo24ntfmxP1d4rneTyy+1PY3T5cOOMKRfGvy+vHz7euAcDj29degfOrj2L5ngaYK4dj/pVDYXd70bpJ+O287brZKMxSlzlR4sFdn6Ld4cXEqTOBXVsAANddPU/qoQAAtm21WHbqAApLynD2bAcAJ26cNQ2TBhZGPXZ3z9f7t62C18/jkitmSVoOAFjxxi7gfBMmjhuD+VOrg57z7JEv0OKy4+Kp0/HCoR0A/Jh31ZUYUNi97taJhlXUxEJTkDBr1izF271eL+rq6nDy5EkAwIMPPqjl8DCZTLjgggsAAJMmTcK2bdvw3HPP4etf/zrcbjfa2tqCsgmNjY0oLy+PeDyz2Qyz2Rx2u9FoTOmFridenzULzDIHXivLJPzX6+d75YVe7bza7UIq0KDjMH5APr483Ybv/etLXDyoCFtrhCzYgosG4MM99XB6/Djb4cHgJHZ4THdS/X3prSR6Xtvsbvh5SGUBicQrRs0WkyFwPTELr+Pxpd/1hM7Z5NDX59XuDZRq5GZZYDTokGc1ifep/x50ie43+dlmoF3dvFYWCov6851u6bGfHm4GAFw1sgwWc+zvfVmeBTXnu9Bs9+KC8vDXO9DQBo+PR1G2CYP65WJidRGW72nA/rOdMBqNqD0n7EIXZhlRmt+930SLUY92hxcdbmGxwnFAttUMTtY4Ilec21aHF/WilmJ4RYHqedZ6vlqNenS4vPDyuqDnB9ZVprDjmkSdgpfnJE1ofrYl7b4vasejKUj47LPPFG/nOA6FhYWYO3cuFi1ahDlz5mg5fBh+vx8ulwuTJk2C0WjEmjVrsGDBAgDA4cOHcfr0aUyfPj0hr9XbUOy4bCQ3EgBoswsX+oIsI964ZxoeWLYPb22vxdaaFuh1HH49fxS+M3MQDjfasK/OhsMNtj4dJBDpj9/PY/5zn8Pl9WPT4qsU3Te6A7tmKPVJILc0oq/AXHj0Ok6yAw40VNMgXFbpbgSEC495nseqA4IN/JzRZaqOUZprRs35LjR2KNugsv4I4wfkg+M4TBiQH3T7cdFhSGunZTnM4ahd/D02G3RBAQIQsEA9eFbY/S7MMiZlEyRsbCYhSAjtlcC0E4ruRuJt7Y7AedDnhMta+h+oZfHixbj66qtRXV2Njo4OLFmyBJ999hk+/vhj5Ofn47vf/S4WLVqEoqIi5OXl4Sc/+QmmT58eUbTc11HqDCi36OrLsCAhz2qE2aDHkwvGY9yAAizfXY//mTUMl4hC5RFledhXZ8Ohhg58ZWxFKodMEFHpcAZ22s53ulBZkNgUt8crZBLIApXoy0j+90a9tKDN09B1Wd4nQZ2KASiT3I2E7/nBsx2oa3PAbNDh0mH9VB2jPF+0QY3QUG23aHc6vr8QHIyuzIOOA5o6XGi0OXEigQ5DzMmILapDG6kBgUU2m/dkNlGTE8kGNeBuFDlIaLO7AQiZEaXHZQpp1+GhqakJ3/72t3H27Fnk5+dj/Pjx+Pjjj6WsxDPPPAOdTocFCxbA5XJh3rx5+Mtf/pLiUacvrDMgdUgNh12UCqxC2o3jOHxr2kB8a9rAoMeNLM8FABxu6OjZARJEnMh3r9rsnoQHCW6yQCUIaWfZKtshztXQdZn1ScixGKD216VUzCTYnMION8siXDqsJGg80Yhlg8oap40fUABAsCAdXpaLQw0d2H2mLaEdjy3imNmmXaj9KXt9OUN6KKMfqaGaZC1vVAgS9CxIEN5PliyQzEQSFiR4vV7s3bsXADB27FjN9Vcvv/xy1PstFgteeOEFvPDCC5qO39dQaqZG5QEC7Q4h0s+3Rj9XR1CQEMS5Dhce++8B3D5tICYPKkr1cAgZ8iBB/v+JItAnIfCjZ6YggehjyHskMFjJkKZMgll9kJBrNiDLpIfd7UOjzYlVBwVnR7WlRoBQbgRAsdzI7vbiaJMwmvFimREAjOufj0MNHdhT2y71KkhIuZF4/WgVd96VFt6h5TpDS3smk2ARxxIWJLDNV33kPglt4vU3VgfsdEd1DqSmpgb/+Mc/cOTIkbD7PvzwQ/Tv3x8XX3wxLr74YlRUVOCtt95K6EAJbbgU0mJUbiQgZRJiODOwTMLJ5i7FFu19jRV7z2LZrnq8tP5EqodChGBzyoMEd8KPz4IEk1ImgcqNiD6CUylI0FRuJHZcjqOZGsdxUiZg15k27KuzgeOAWSPVBwns+aFdmwFgf70Nfl7ozFwqc/QZX1UAQGiqFsgkJKDcyBhSbqSYSQi+racyCZZI5Ua+KJkEQ0gmIYP1CEAcQcJLL72Eu+++O8wl6NixY7jllltw7tw5VFdXY9SoUWhtbcXtt9+OnTt3JnzARHwodlymTAKAwJc4ViahX64ZRdkm+HngaGNnTwwtrTkn7j6d71QWvRGpI/mZBFGToLDp4PPz8PnVVlYTRObCyo0sCuVGNpXlRjzPo9MV0CTEA8sELNki9Dm6qLoQ/XLDHRwjwTQJSkHC7jNtAIBxsiwCENAnbDnRAofHB4OOQ3VR983/2W59QJMQviwNLaPqqUwCe90w4bInvEKDERAuC5s0VgWNRSahOkj44osvMHHiRAwcGFyv/dxzz8HpdGLhwoWoqanBvn378M4778Dn8+H5559P+ICJ+JDKjeTuRmLA0Nd3/thFKVaQwHEcRpQJ2YRDDeq8hU+e74K3l85vc5dw8WvpSvxONdE9bCGahETDso9KmgT5/QTBOHGuE1tONAf9iySYjURzpyvhQS/P86g53wWejz+wDZQbBc79eDMJXW6f1IcnHncjILDI33pSsOqOp9QIAMpyA0FC6PvfWyfoESaEBAkjK3Jh1HPSuqG6OCvoOqAVtogOlBuFL6qzZZqERAUn8YwtoiZBIesRpknI8EyC6jOzpqYG1157bdjtK1euhMlkwuOPPy7dduONN+LSSy/F559/nphREpphtXNKmoS+/oPeJpUbxU71jijPxaYTzTikQpfw6aFG3PXqdtxz2RD8av6obo8z3WjpEjIIzRQkpB2p0CSEBglqxZNE72dvbTuue/6LsNvzrUZs+N9ZyFGxOG7tcmPuM+uRazHg059dAV2CGlr+e/MpPPD+fjx8/RjcMWNQXM91uJXKjeITLrPHGXSc4u55NMpkZUBA/EFCqeiQ5PT4YXN6gzbK9oSIlhlmgx6jKvKk+4eUJGY3X8kCNRT5PFcXJSY4UUMsdyNFC1QWJIjX3+y+okk4d+4cSkpKgm5raWnB8ePHMXXqVOTm5gbdd+GFF6Kuri4xoyQ0oxTxktBQwKYykwDE53B08KzwmP317d0YXfrCMggdTm+fP4fSjSB3oyQGCXJNgkHHgZl3uHyk2SECbBN3unPNBgztl42h/bJhNujQ7vBI98Xi7R1n0Nzlxslme0ID3wPidfpwY/yGFGzRKHfdiTeTILc/jdf9plRWWjSkX3bcAmKLUS/97smzOu0OD2rOC3qDcf3zw54nv21oaWJ0ASxIaItigaqTBVI9ZX8KBMrJHO7g3zklrScjVJPQZ8qNjEYjmpubg27bsWMHAODiiy8Oe3x2NjWdSgeU/HxJaCggb6YWC+ZwpCaTwPyRz0VoVJPpyDMILEVMpAfBwuUkahJkQQLHcWSGQChy4ryg4frW9IFY87MrsOZnV+D6CZUAhNr2WPj9PF4X6+4BoLkrcdfUVvE61q6hLI8FCfIFbZ6USVAbJMQvWmbIMwlzRsWXRWCUMxtUWZCwTyw1qi7KQqFCs7IJsuzC0ERnEqIECUAgIBuaALG0WpQyCX4/L+s/FVuTkOnlRqqDhOHDh2PNmjVBt33yySfgOA4zZswIe3x9fT0qKqjxVCrheV7ZAlUmNIxVN//Khho8vuKgprrNdEetJgEAhouahPOdLjTHEOyy4KOplwYJci1CcycFCelEuyOwQNGy+GGsOtCIn721O0ywp9RxWf43BQmEnONN4Z15pw4pBgBsqWlWfI6cL46dx6lmu/T3uY7EXW/YBoeWYDrQJyFck+Dw+KSMWzRsTm2iZSCgSQDiLzVilEpN2QK/U7vFjsqhomWG/PbEZRIC6xEgYIkaCltsJ8J2VS1KFqjyzdVoHZfZhorV1EfKjRYsWICjR4/iBz/4Afbs2YP//Oc/ePHFF5GTk4OvfOUrYY/fsGEDLrjggoQOlogPr5+XhFFK7kZA9GyCz8/j8RUH8eL6EzjT4kjaOFMF2/HPt8Zu755tNkhiqVglR63i4qzN7pGCtN6C1+cPEsSSeDm9sCVIk/CnNUfxzpe1+OLYeek2nudlmoTgnw4zZScJBVgmQW6VOXWw0Ftlb2077O7ou+7/2nwq6O+EZhLE63+bBqtgJQvUHNliv1NFNqGjG0HCkJJsWI16VBdl4cLqwrifD4TboNrdXry+WcjaXDxQ+ZjDSnNQkW9BnsWAYWW5io+Jl9DMgZKtKABUFQq/v+OrlAOYZKAkXJa7QkYTLjOyMzyToPrsvPfee7F06VK8+OKLeOmllwAIPxpPP/10WGnR9u3bcezYMXz/+99P7GiJuAg6mYPcjYKFhpHaBDR3uaRo+FynC9XFPeMo0BP4/Dw6RPs5NZkEQCg5Ot1ix6GGDsy4oCTi4+T+9M2d7oR3vU0lrSG704n80Sa6T7AmQXsAx0rlWmVBoM/PgyUUQ38IqdyICKXT5ZV2qeV15FVFWehfYEVdmwM7TrXi0mH9FJ9f3+bAmoNCN+ERZbk43NiB8wnMzrZ0Cd8VTZkEhSDBqNfBatTD4fGhw+lVLNeR051yo+IcMz78n0uQYzZAr1HIXR4SJPxpzTHUtTnQv8CKWydXKz7HoNfhPz+cAa/PL5VXdZfQzIFSnwQAeOH2i3CmxY6R5XkJeV01KPVJYBt/HBds4MAIzS70mXKjrKwsbNiwAQ8//DC+8pWv4Pbbb8f777+Pe++9N+yxX375JW644QZcf/31iRxrr8Xl9eHEucT777tkJ3aQ0FCvA7uuRPtRb5KlIXvbjnGH0yMteNQGCWrFy/KFdCJ1CR1OD2pb7bEfmERCz4Pedl5kOomwQOV5Xvpc5YEG2zAAAKMh+MeRyo2IUNhvWkmOOeway7IJm09ELjl6c+tp+Hlg2pAiTBEfnyhHNZ7npUyylu+JXSo3Ct5nZVkBNb0SbA7tmQRAKLsJdTmKhzKp3MiJww0d+H+fC80xH7lhTFSHsv4FVgwsTpwuIPS1ImkSirJNmCA2dOsplPokBLot6xQF56EbKJlebhTX6HNycvDAAw/EfNw999yDe+65R/Og+hq/fm8f/rOjFkvvmSbVayYClkkw6XVhtnEmgw5Ojz9qQ7WG9oCgqaWX7Riz3aMsk16xrlAJSbwcww1D/qOTSF3Ct/+xFXtr2/H5L69ERX5qshOhmQMKEtIL+eKkw+mFz8/HvdPY6fJKZUPyXVZ5KVFouREFCUQo0bryTh1ShHd31kUUL3t8fry57QwA4JvTBuJYkxBwJKqBY4fLC69Yi6vle6LUJwEQFvxNHS5V4mWWSUjUjny8sG7KDe1O/GbZXnj9POaNKcNVGoXQWgkNCuK1g00mSsLlaKJlIDyTkG3uI5kEInnsFX2HPz96PsYj4yOqTZc+dg1xY0cgSOhtnviSs5HKLAIQyCQcbeyAP0JnWfkOFZC4TMK5Dhd2nm6D189LP76pIDQo6G3nRSbD83xY6YRNQymF/DOWB7zyAMCgsOkAAC7SJBAix8VMgpLQdOpgYTNsd21bmDgeEITzTR0ulOSYMXd0OUpyhF3v8wkySmgNuW7F+z1xSpmE4AVgPL0SuqNJSAQsC7G7th3bTrYiy6THb68b0+PjCK3rV6rzTxWKmgTWeypCxiM0SOgzFqhE8qhvF0TBzFkgUSh1W2aYxC8iO+GVkLsetPQyFxu2mMqLI0gYVJwNk0EHu9uHMxHKfjplO1RA4oKErTWBHbdU7t6HlRv1svMik3F6/FJJENsV1VJvLQ/85M+X90gITbOTJoEIhW1mKFlWDizOQlmeGR4fj52nW8Pu/7coWL51chVMBh1KcoT6/kRlEkKvY/F+T5QsUIH4eiUENAmpCRLKQ0qV7ps9PCX6ufByo/RZlkp9EhQ0CaFlRYzQ27MyvNwofT6NPkqnyytdUPbWtWu2Gq0534WFS74MauAV6LYcHsmqcSNpDCo36l2LwXi6LTMMeh2GlQq7YpH6JYTWt57rdCo+Ll7kdoGp7E3ALE/ZvPW28yKTYQsdvY5DmdhsSUtDNXngpxQkRBPrUZBAMKJlEjiOk7IJm2uCS46ONXVi4/Fm6DjgG1MFAS3LJCTKcjn0Oh3v90RJuAzIeyXEk0lITblRSY5JaoI4sjwXd84clJJxhAqXI+3QpwImonbKNlOl3lMRgpk+K1wmkkNDe8BatM3u0Ww1+vb2M/jvnrP458aT0m3RaufUdF3uzeVG7ZL9aXwX6BExxMuhPz5y8Xd3kAv8WrsS3yRLLSwoGF4qzAO5G6UP8r4f+aJlmZZMQkuMTIJR0Rtc+CGkIIEABCcs1rlXSZMACLoEANgiu7bxvGC7DQCzRpahv7izXSyVGyUnk9AW58aLI2K5UTyZhNSWGxn0Oowoy4Vex+Gxr44N0xn1FOGahPRZVCsKl72RN1+B3hckZHYepBdQ3xa807ynrk2T1SgrDTopazwjqfCjNPyIGiT0YncjtvgpUNEjQU4sh6NQ28lzCfhRa+ly40hjwP0qpZkEMSi4oCwHW0+29LrgMZNhouV8qxH5VuHSHu/iBwjeEAjWJIR3W2ao0TgRfYf6NgdcXj9Meh0GFCr/nk0TTTp2nmmD0+ODxajHx/sb8emhJhj1HP736hHSY1m5kd3tg93t7XYJR+g1VGu5UegCUAoSXLGDBFs3LFATxWt3TYHN6cEFpYnpeaCFsCBBpZFITxCtT0JE4TKVGxGJ5Gx7cOZgT217hEdGp0nc9T8tDxIUui0zpCDBF7nZV5OtF5cbiYuf/DjKjQBghOjRfKjBpng/sz9ldZWJ0CRsDelMmsrPgqX7WdlVm90Ts2t3uuP2+pNiQdzTsA7LeRaDFPxqEy4HztlImoRQ1GQmib4DKzUaVJIV0TVoSEk2SnLMcHv92H2mDV0uLx5evh8A8P3LhgYtXHPMBuk3KxElR90OEtyRNAmZI1wGBIejVAYIQHjJVjqVGym6G3kjb74q3R7NTjYToCAhxZwV6/7ZjsQejeJlthhtsDmlqDdaWiyW0NDl9QXtKPa2shJ5aUY8sExCzfkuxW7KrIzpAnERfa7DpVlnwtgs2gSysaYyk8ACFHmdcWiDtUzjtx/sx6w/rsOm45E92zMBtjOZZzVK54oWD3j5997m9EhOXqRJINQi2Z+WhOsRGBzHBUqOalrw7OojONvuRHVRFn4864Kwx/ZLYMlRS0jJZnuc35NImoRAn4R4LFAze6e5u4QKldMpk2AxCWNxeHzS7zhbO6i1QM30cqP0+TT6KGfFcqMrRghdJ/fV2SLaa0ZDfuE80yJkE6K7G4mWhRF+1FnQwTaBnB4/7O7YF75MoU1jkFCaa4bJoIOfV84SsAUzq9l3ef2qfjCisUUU9s0W/avTIUjol2vuNeLlA6LY/+BZ5exQpiB37GKfTXc1CTwf2PF0S0EClRsR0ZFEy6XRm25NE5ukvbezDv/YcBIA8PANYxTr0oslh6MEZBLEczxbXMDFK1xmG3GRLFBjZfB4nkenK7XC5XQhNHOQVpoEcSw8H1grvb+rDgBwYXWh4nNCM63ZVG5EdAdmf3rZsH6wGHXodHlx4nx8pQ9enz9o9++UWHIUcDeKP0hgeoSKfKv0/EQ5S6QD7RrcjYDgHS2lRmls57Ys3yLtKnWn5Kjd7pFKm74ythxA6oTLfj8vBSjF2SYUZQs/2pmeZWKfY6a/j2DhsphJ6GaQIBxD+JvZqyoGCTGuJ0TfQk0mAYDUPLTmfBd8fh7zx5XjyhGlio8NOBwlIJMgXscGlQhBTDzBtMcXsBqOlEmIJVzucvvA9gJTWW6UDoRlEtIoSJCPxenx4WhjB7bUtECv4/CNKVWKz6FyIyKhsK7GAwqzMLYyH0D8uoTmLjfkFS2npEyCCgvUiEGCMK7yfAuKpcVgLwoS7NoyCYCwiw4oL/6ZULTAaoz6OLVsPdkCnhfqd0eUCdmJVO3ctzk80g9bYbZJOi8yOZPg9/NSFu58R+a+DwCwOYSFSb6s3EhTn4RO5XptjzeauxGVGxEBWCYhkrMRY1hpjrTZkG3S48FrIzfzYtebRJQbtYUECfGU5clFrJHdjaIfj92v13EZ32yru5j0OshlK5HKeFKBUa+TGkc6PX68vuU0AOCqkaWoyFfuKSEPEgw6LqJ2IVPI7NH3ApgmoTzfgnEDtAUJoYvQU83CLk504XJ0y0IWJJTlmVGUwxaDmb3TKkeruxEQI0gQj1uYZUJpLss4aO+VwOwBpw4pQkG2sPBzeHxBP1Q9BQsG8iwGGPU66cc9k4OEdodH2hXsLZmEPItROq/jrbUGAvMglWKIx2CaBHOUTAIFCUSH0yNl54Yo9EiQw3EcZo0UMge/mDcC5fmWiI8tyU1c12WmSRhcLAQJ8Qj8mWhZx4WXlgT6JETPJMhFy6GNCfsaHMcF7dinUyYBCGSLmrtceGdHLQDgm9MGRny8/JzI9CwCQEFCSulweqS6xMoCCyYMKAAQv3g5PEgIKTdS0iTEqCFm5UaluRYUZSe2kU06wEoo4i03AqIHCawcJz/LiH65loiPUwvTI0wdXIxcs0Ha1UiFLoGl6JlneW84L+QWtecy+H0AoRao2jIJdrdXahw0uF9wKYakSTAoCJel60nPB69EesFKjUpyzKoytQ9fPwbvL5yJO2cOjvq4kgQJl3meD88kONR/9+Wi5dAFvtpyo1R3W043goOE9FqWsq7Lb207gw6XFwOLs3DJBSURHy/PHGS6HgGgICGlNLQLF7t8qxFZJoOUSdhfb5N27dTAFqFMRX9aLDcKNFNTcDeKsfPXpFBulMk7xnKcHp+0EMrTUG4UyBBE1iQUZpkk7YLWXgk2p0fqoD11SBE4jkNhCj8LtvvGMgi94byQN7s7nwC72lQSEC4bpOA3nsUPEAj4THqd1MiKZcfUaBIok5A5NLQ7NZWjxYJp6obGKDViZJsNmFBVEPNxJTmJKTfqcHnhFesmB5cIPRzimQdHBNEyEBAhOzy+qL/hzMwi19y3RcsMawZkEt7aLmQRbp9aDV0EW18gOJOQ6c5GQBoGCU888QQmT56M3NxclJaW4sYbb8Thw4eDHuN0OrFw4UIUFxcjJycHCxYsQGNjY4pGrJ2z4kK8QkyxDi7ORq7ZAJfXj6ON6sXLrJzlIlFtX9tqh8/PS5oEpZo4syQ0VN75a5CXG/WCxaAcllrWcUCuOf5IX5UmIav7moQdJ1vh54GBxVlS/WNhlnZry+7CPn92PvSG8+Jcp7yrePftalOJzRGeSYj3PJF/xqG9FjxR3I2oT0JmUd/mwOyn1+HbL29J+LGPN7FOy9FLjeIlIFzu3vWGORtZjXqUitneeL4nkXokAMGZgVOynkWhpEOPhHRCXu2g1Icllch7JZgMOtw8SVmwzJCvt6jcKAmsW7cOCxcuxObNm7Fq1Sp4PB7MnTsXXV1d0mPuu+8+LF++HG+//TbWrVuH+vp63HTTTSkctTaYHoEFCTodJ9MltKk+DluEju2fD5NeB4+PFzpeelQ0U4ulSci1yFxsMncxKEduFRltRyASkTIEfj8f5JpU2s0gYbPYRG2qaBMICBkKIFWZhICzERCwJMzkWn75Z+P0+NHlztxyGZuCu5HL649LvyIPEiSHJDtzN4rcTC3QnJGChExg5b4GdLq82F3bHnGjSCvxZhLUUpygTEJQIKzhexKpRwIgBNCXDRfszH/34YGImw4dadBtOZ2wiNUOJoNO029yMrHIFvrXjq+QsvmRoHKjJLNy5UrceeedGDNmDCZMmIBXX30Vp0+fxo4dOwAA7e3tePnll/H0009j1qxZmDRpEl555RVs3LgRmzdvTvHo44M5G1UUBFTyUpBQp168zBar5XlmDCgSjnW6xR61fXisnT9WhlHWC8uN2iTRsrYLNMsQhJandDi9kvtPgdXU7UzClhMBPQKDBWyp0SQElxv1ikxCyGeTCHvFVCEXLueYDJJjSDylFGwjoDjHFKZrYNcKxWZqMZozEunFqgOBzHt9m3ZjBSWYJmFokjIJrd3s8i6VhGYbkWM2SB2h1X5PWCYhUinJQ9eNhkmvw7oj5/DRvgbFx7BMQl9vpMZgOoR0aqTGsMqyHNEEywyDjgOTqvSGTELan6Ht7cJiuahI2E3dsWMHPB4PZs+eLT1m5MiRqK6uxqZNmzBt2rSwY7hcLrhcgR9/m03wnfd4PPB4er5sg71mXZuQjizNMUm3jSkXLqy7z7SqHhvTDxRlGVBVaMWJc1040dQBh9j8zKBD2LH0UpM0b9h9XS4vOkRBdZFVj3yLcKKf73SmZL7U8vb201hZo8NV7uiL1uYOoTdFnsWg6f0UWYX5aOpwwu12S+K1czbh88w26cHxPhTKHhfv63S5vNgrBoqTqvOk5+dbha/seZu6Y/5jw0nUtjrwwDUjNbtosNdpFsvaCqzCvOWZA/0z0vm8iEaD2KdE+rvNjsq8+B2vtMDmLBFz5/UFsiBZRsDn8yLfakSr3YNmm0M6Z2NxzibMR4HVgByx22hrl/D5OsXriV7xeiJEx06PLy3OhUTObW+jze7B1pMt0t8nz3VgQL66cz7WvPr8PE6cF4KEqkJzQuc/x8hBxwF+Hmhst0uZ2ngJnONGeL1e5FkMcX1POkWdj9mgU3x/VQVm3HPpIDz/2Qk8/MF+TBtUEFZW1C45iOmC1iF99XxlwYHFqE/oHCRiXpmb26jyXIwtz1Z1LJNeB5fXD4uBS9vPVO240jpI8Pv9uPfeezFz5kyMHTsWANDQ0ACTyYSCgoKgx5aVlaGhQTlqf+KJJ/Dwww+H3f7JJ58gKysr4eNWy/6aegA6nDt5GCtWHAIANDsBwICDZ214/8MVUCP0P9mgB8Dh2L4vwdt0AHT4bPs+8Vg6HDt8ECvaDwQ950QdB0CPE6fOYMWKU0H3NTmEMZh1PNav+QQ1HcLfdefasWLFim6952Th8wMPbdPD7dfhxXdXY2he5MdubRLeu7uzTdP7ETZLDfD4ePzng48gOpPilDhPJnixYsUKdHiEv1u73Fj+4QrEU2p5pJ2Dz69HgYnH7o1rsVu8vble+Hx3HTyKFc7D0Q4BHw88tUUPH8+hwlGD/t3M/h+rbQCgw+mjB7CibT/aXIDw/lz48L8rkGZZYlUcOinMJ+OT9ZvQUNSzuoRVq1Z1+xid4rkGAF+sXQ09B+j9wnVh5dr1OBrl+yBn+ylhPmxN9ahx1AHQo6auEStWrMD+M8L35mxdLVasOB30vP3nhfsams6n1TUiEXPb29h+Tri2MD7+fCtsR+I75yPNa7MTcHsN0HM89m76DPsTfE3IMujR6eHw/so1mq9nG+uFc9Xeeg4rVqyAIc7vyRbx96OjrTniuT7ID5SY9WjscOG+f6zGTYOCMx/7Tgjfs8baU1ixoka6va+er+2twnz43M6kXD+6M69cpzC2STlt+Oijj1Q9R8cL51TLuYa0uh7Ksdsja2bkpHWQsHDhQuzbtw9ffPFFt46zePFiLFq0SPrbZrOhqqoKc+fORV6eyl/PBOLxeLBq1Sp4jTkA7Jh32RRMFztP8jyPPx/+DK12DwZNnIkJYvlRNBbvWAPAh+vnXIHcI+ewfsVhGArKUejzAy3ncdGEcZg/aUDQc85tOoUPTh9GaVkl5s8fH3TflpoWYNd2VBZmY/78S3CyuQvP7tsAJ2/A/PnzEjUNCWXnmTa4t2wFAFQOG4f5UcRFjRtPAccPY2h1+HtXyyN7PkW7w4uJ0y/DsFIh+7PuyDlg305UFOdh/vzp8Pt5/PbL1fD5gcmXzUJ5XmQP8FBqP68BDhzFtGHlmD9/QtDYV9UdRl6/2GM/3WKHb7Pw3Rkw6iJcLXZsjhd2vnKWXKC9C7NmTMalw0rg8vrx2y9Xww8OM6+cLeklMok/H9sAoAvZJj263D4MHDEW8ydHF6YlCjavc+bMgdHYvdrkk81dwPYNyDbrcd01cwEAL5/ZjPO1NoyecDGuGqXcxTaU9e/tA+rrcdGY4Rg/IB+vHt0BvTUX8+fPwKHVR4HaGgwdPAjz548Mep7pYBNePboLOfkFmD9/arfeSyJI5Nz2Nla+uRtAo7QrX1h1AebPHqbqubHmdd2Rc8DOnRjSLwfXXjMzwSMHXji+EUeaOjHywim4NIoNZTQOrjoKnKrBmGHCefyPM1twrrZd9fekdctp4PghVFeWY/78iREfVzTyPO7655f4vEGH+26cgTGVgbXGp//ZCzSexcSxIzD/ksF9/nxdaduN/a2NKMzLwfz5iTtvEjGvV7p9qGnuwugK9WvFh/eshaPLg+GDB2L+/FGaXjfZsIqaWKRtkPDjH/8YH374IdavX48BAwIL3PLycrjdbrS1tQVlExobG1FerrwIMpvNMJvDU5NGozFlX0ieBxrEuv8BRTlB4xg/oADrjpzDgYZOXDw4+oWwy+WFXSwzqCjMxpB+QknImVanVDOeZTaFvU+raL3m9vNh9zXbhbKC8nwrjEYjSvOFLZsutw8+6NLOogwAdpwOnPANHZ6on2unS5ivomyz5s+/X64F7Y5OtDp80jE63XzYcUtyTGi0udDm8KOqWP1r7T/bAQCYUFUYNMYS0Y2j3emNOfZ6W6Ds6mSLs9vneqt4XpTmZ4nfHcEdqsPlhc3FozQ/8vF5nsexpk4M7ZeTVsK082IN/siKPOw41Yo22efZUyTiOsTMWQqsge96QZZwzetw+1Ufv038jPvlWVGSK+ibbOK55ueFz81i1Ee8nnh84deTVJLMa7zPz+NIYweGl+VKde3pjsvrw/qj5wEA88aU46N9DWiwueOeo0jzeqpV+E0b2i83KfPeL8+MI02daHdq/562O4Xrf0mOBUajEQXi5oba74lbTApkm6OfW7NGVeDa8RX4cM9Z/Hb5Qbz7o5nSecJKAwuyLEHHSOWaJJVkidcPq8mQlPffnXk1Go2YkK1+gw9gtvMe5FjS9/NUO660U4nwPI8f//jHeO+99/Dpp59i8ODgBiuTJk2C0WjEmjVrpNsOHz6M06dPY/r06T09XM04fAgs7kPae0+Io/OyvEdCttmAgcVC+ZQgXI7ibhRFaMgE1WV5wiJD6LArXNzSVaS6RXQCAgR7v2i0yVxgtKLkXCRvpMaQxMud8YkD2Wcfmkliu/VqhMtyC74T59Rb6irB84HXLJK5OwS6cUcfz/u76jHnmfX406dHuzWOROLy+iQR46iKXADdd05JFUx0Ka99LtDQUK1Z7m4UYqPqjmKB2hf7JLyyoQZXP/c5/rnxZKqHoppNx5vR5fahNNeMr4iZxdpWdWUHamDXmSEJdjZiFGcz0wjtv0Ot0jnOgun4vicOMUqwqBClPnDtaOSaDdhd244PdtdJt7M+CXnWtN2n7VEk4XKaNVLTCrse9gbhctp9IgsXLsS///1vLFmyBLm5uWhoaEBDQwMcDmHhl5+fj+9+97tYtGgR1q5dix07duA73/kOpk+frihaTlfaxLVIYZYx7EQaH0fnZeZsxBatAwqzwHFAp8srWawqdVw2i9kApR911m25TCyP4TgupdabsfD6/Nh+slX6uzZGkCC3KdWKknNRoJGaLEjIid/hqLnThdpW4T2M6R8SJDB3o67YP2isqR4AHD/XFeWRsXH4As20goIEyeEo+vtjnaP/s6M2bXoRnBf91o16TnJiydTu0fJuywwtXZdb5O5GWYHGUC6vT12fhD5kgcoCefkGRbrDXI1mjy5DVZGwoVTXGv16GQ9nxGMNKk5OkCB1Xe6G7XKL1MtGuHbF+z2xe4QFfpaKjHpZngX3XDYEAPDapoD2L9AnIT13mXsaVp2QjlUKWmCbsNRMLQn89a9/RXt7O6644gpUVFRI/5YuXSo95plnnsG1116LBQsW4LLLLkN5eTnefffdFI46flrdws58eUgWAQDGi7vHx5o60eWK3t6dWZWyRavFqJdq39lC06RX6Lisj/yj3ii62JTKaujTuVfCgbM2dMrmqa41+q49W8xr6bbMUOqVIDVSswYW0axZj7yzbyyYq9GQkuywbEdRHMHaqeZAYHDiXGe3Fued4u9ntkkfdCEvVnlenG4RxlLb6sDhxg7N40gkLHDrl2OWFh9au2OnGnnvD0a8O6RAsId8rtkgWfm1OzzweIXzR6k5I7vG9KVMQp24GXG4IT3O51j4/TxWHxSChDmjyjCgUPjtabA5o3YHjgeWlehfGP67lgikXgndyCS0hWREC+JsPOh0R+64rMStU6ph1HPYeboN++uFa3ugTwJlEoBABkGp6iETYdfILOqTkHh4nlf8d+edd0qPsVgseOGFF9DS0oKuri68++67EfUI6UqbeI2rzA+vdSvNs6A8zwI/D+yvjy4uOScu6PvJ7OCqi4IdmxQzCVHKAxrFDIRcaFuco27HWIlPDzXih//eIaV5Ew3rJzBcFBDXtzvg90deELd3s08CAJSKpVjMfhYQ/LuB4AxFoNxI/byxHcpxCqL1guzA7m6s5j/ycqMutw9NGvs1AECXGIOx8iKGlEmIsQMvH8uq/enRHV0KEnLNsm6umR0kKGUS1C5+XF6fFGwXZ5ug03HSMWwOjyyToNAnoQ+WG7EF8akWO+zu6Js56cDeunY02lzIMukxfWgxSrLNMBl08POBEtPuwPO8lJUYkKQggW3OdKeBY0sXy/gK1668ODMJrJma2l3vfrlmzBsjrE/+vVlwBaM+CcGwxnTm3pJJMFAmgegmbS7hh7aiQFkQo7bzMlt8sosnAEmXwIi34zLLJDBNAiCIcQFt5RgvrD2Oj/Y14IPd9XE/Vw0s3X/d+HJw4OHx8VEX5UoLqnhRWvxLTdpkLj9aGqqxIIGVncnJNRtgEMVv0XQJPM9L5Ubs8z/epF2X0OkRXpOdBwzpvIgSALq9/iCdyKqD6RYkWFAidXNNv0yZGmwOYdHRnXIjlkXQ6zjkiWUQ8kDDrabjch8JElzeQNDN88DRxu5pfnoClkW4fHg/WIx66HQcBoiNPM8kQJdwvtMNl9cPjgvX2SWK7nZd5nleyiQUSpoE4ZhtqoME4RxX6rgcCdaEa9nOOrQ7PFIwTuVGAqz0LXSDM1MZUCi8j4FJKrvrSShISBEskxDpYqpWvMwWOvLSoNAT02xQKDcSf9SZuJnB83yYJgFAt7ous7KX3So0FvHi8/PYKta7zxhajAJxfV4bpc62XWExHy/9coS5CdYkiD8+SpmEuIKENgDhomVA1Ieo+CzOd7phd/ug44Apg4VGhMfPa9clsHKj4pCW9GrOi9pWO/y8sLjkOOGcTsTOZXdpkmXhWCah3eHJyIWuvNsyQ1rgq1z8sA2AwiyT5EAlFz9LmYQomw6uPqJJONvmhLx6LxNKjpgeYc7oMuk2VhaUCF0CK78qy7UolqQlgkDGT1sw3+HywitmmQs1ahIccZYbAcDUwUUYVpoDh8eHJVtOwyeOgcqNBK4bX4n3F87EvSqteNOd3980Dh/+5BJcVF2Q6qF0GwoSUoToFIcKhXIjABinUrzc1BGeSQgrN4rD3Ui+SCoNyiRoCxI6XV5pd3avCrcm+fOONcX+4T3UYIPN6UWO2YDRFbkoEoccybGD5/nEZhIUhMvyciMmKFdb6tNoc6KpwwUdB4yuVPZlZrqEaOJlpgGoyLdiZLng3NOtTIJYTREWJKhwNzolZjSG9MvGxKoCAOmRTZCXG+VbjVKGRksg7PfzOHjWBm+KFskB4bLM3Ug8T2xxZhLkn3GeLJPAhOuK7kay60m6CNOTSV2IOcKhNA8SzrTYcaihA3odh1kjA70AWFlQtE0VtbBrbrJKjQCgJDcQJGg5z1jJa5ZMWyVpd1Q4xgGQyjzjKSXhOE7KJrz8hdA8Ta/j4spG9GZ0Og4TqgoUNzQzkWyzAWP754PjMsMaORoUJKSIdlG4HCmTMF50tTnZbEd7lJpi+UKHEVZupOhupCxcbhBr7AuzjEFfWK3C5dOyWvRj5zqDBMbR+MmSLzH76fV47L8Hoi68mB7h4kGFMOh1KDILPxyhP+KMTpdX2sXpjrsRW/y32gNBVWuIawYQHEyo+VHbfaYNADC8LDei6ImNO1q5EdMADCzOwhDRuedEtzIJYrlRBE1CtPOCnQPVRVnSLibb1Uwl8u+OTsdJ70VLKcN/vqzF1c99jufXHkvoGNViiyJcblO5+JGLlgPHEP5fnkmIVm4EBFywejOhmxCHG9U1JkoVaw83AQAmDyoMuj71L0hckMCyEckSLQOBANbt80s2ovHAznF548e43Y1E/Um8Tjxfvag/rEa9dH3JtRh6xSKS6N1QkJACeJ5Hq1RupJxJKMw2oapIuNgytxslFIOEIhXlRnpWbhS8AFcqNQK0lxuxHW1AqN3dH+W9BB7HY8cpwdL0pc9r8J1Xt0Vc6DA9wtTBQsfqQimToPyjx3b7TYbuNYXLtxolAef5The8Pr8kRpMLotnn4vD4pAY60WCf9bj+4aVGDLaIUx0klAjnQ3d6JUQuNxLeXzRBu3wsc8UgYdPx85LDR6oItQ+W7BU1BAk7T7cBiC9blkiiCZfbHZ6oQn6G1CMhR76AEgLVNlmGMZoFKtA3bFDZ9YV9T9O93GifeF2ZIl4nGax2uq6t+5qE2iSLlgFhYZ5rFs5JLd/T1hA9AhBcUqfme6JFkwAIpYA3Xlgp/U2lRkQmQEFCCmhzeODxMwvUyJ38pH4JdW2K9/v8vPTDXioLEvKzjEG75PEIlxtt4fangPZyI7mrDaCuQVxzlxs2pxccJ1yIPz96Hje8sAFHQqwz/TI9wtQhQt29lEmIECQkwtkIENKjJbIeCPJdKPlCLctkQI74oyZ3QorEbiZaFstylFCjSWCi5eqibAwVXZ/q2hwxHZEiwYKEMOGyrNwoUqaEBYrVxdkY2i8Hg0uy4fHxWH/kvKaxJIpQ++DiboiX2XuMlMFKNrYoQYKfBzpVuO+wQE8eCDI735juRrLAIRM1HfHCri9XjugHjhPOmXRuxMeCGFZ6yOifwHIjdu73L0iu+JR9T7XoElpDnI2AQPZN7feEXUO1NMq6fepA6f9zzSRaJtIfChJSQEO78GNSlG2MupstiZfPKC+sW7rc8Pl5cFxwiQAADJTpEqIFCa6QGuKA/WnwYjBwYY7vh5DVo2eLF9Q9KjIJrHZ+QKEV7/xwBgYUWnGq2Y6vvrABn+xvkB53pKkDrXYPskx6aUcvliYhEY3UGPJSojZJOGqAIWSnVa14med5SYMyPkomgQmjo1nKMrH4wOIsFGebkGcxgOeBmpCSo3aHB/ct3YVPD0Uv/+n0CgvDSMJlj49HR4RSMimTUJQFjuNkJUcNio9PJG12N+59cyfWhGggeJ4Pcwbr1w0bVPYea1sdKanJV+qTYDHqpe9+tJJFRkCTINtwsAZKltxRhMs6HSdpOvpCkMAW1ReU5UrX2nTNJvj9PI6I7ksjQoIEqVdCu7Pbepqe0CQA3cv4KXWNtxj1kk+/mu+JJFzWkIke2z9f0mVRJoHIBChISAFnbeF9CJQY178AQORyI7boLM42hS1Mq0WHIx2HsPsAwCxrsCavIQ7Yn4ZmEoQLs83pjavxDqtHZwtDNV2kWe38kJIcjK7Mwwc/vgTThxSjy+3DPf/agedWH4Xfz0t6hEkDC6USCLkmQWmxlgjRMkMuSm5T0CMwlBqvKVHb6kCb3QOjnsPIityIj2O7YK1RftACmQRhYc6yCcdDSo7e2Hoa7+2sw1MrD0cdWyCTEPz+LEa9JOBT6pXg9wesWJlWhp0Lnx5qSlgTp0j8v89rsGxXPf7v4+D3Z3N6pcVseCYhvsWH3OK10+WV7Eh7Cp7npfrs0PM6noZqbGc2qNxI9nypmZrC9QToWzaogV1zq7TwTlfx8ukWOxweH8wGXVgn5NJcCww6Dl4/j8Zu9FGR90hIpiYB0L5hBShrEoD4dAnx9kkI5e5LhQ7MoQEbQaQjFCSkgLPibn0kPQJjbP88cJzwg6S0cJF2QnPDj8N2tyK5BZgi1BAzTUJouVGB1QhxozCupmgnxR3ta8cLtZinmu0xhZQskzBUFNwWZZvw2nen4M4ZgwAAz6w+gh+9/iU+E8V4U0WLTyCgSXB6/IpiWqZJyLeGL+bjJSiTYGdp7PDgQ20mgVnEjqrIi+ryEEuTIHeUYgvzISWiePlccCaBCYiPNnVKO2Sh8DyPrghBgvw2pQZHTR0uuLx+6HUcKkWR5EXVhSjKNsHm9GKbWC6WDNxeP97cJjQvOtLYEdTwin0WeRaD9GOv1V6xrs0BeSlzIjzn46HL7ZPE+HkhvuvxNFRTcjcqkNmoBsqNYgQJPm0lbZmCx+fH2XZhQVxVaMWIcsGF7HBDeoqXD4njGlaWA70uuFRM/r3sjg1qm90jaa6YGDpZBLqjayg3soeXGwGBsjo13xOHBncjOdeMr8DH916GxVeP0vR8guhJKEhIAY0qg4Rci1ESnSoJIpVEy4xqcXGo5GwEhAQJsp2/pghZDp2Oky6soYvv4+c6FTuOyndYxw/Ilxas0YTYgCyT0C+w62XU6/DQ9WPw5IJxMOo5rNzfgLWHzwEApg4JiPEMOqBMnA+lOttEZhICGQKn9OOTr5RJULBB7XB6wjQW7DOOJloGYmsSWPamKNskNesZWirMpTyTcL7ThS9PCwJxn5/HgbPKn0uX2wcPL5Yb5YS/P7aoVFpcs7Kn/gVWaXEpt2H8JE6Xo2NNHZLdZyw+3t8gBUt+Hjgg617epNCpvFhlxicU9h4Zauu7vT4/znRCWuAr0dzpCnIIU4Kd0ya9TiqbYLDFj5odUiV3I2mHVdZMTUmTwF4fCDdD6C6HGmzoUumK1hM0tDuFvh8GHUpyzFKdf7qWG7EMx4gyZUvlgA2q9uCWZVZKcszdMoRQQ3E3ygJbpXM8JJhWmXHz+Xnp97I79qUjynM1aRoIoqehICEFnG1XV24EABNE8bJSIzJpoZMTHiSwtHKkC5k+Qg0xs0Atyws/ppJ4+Yuj53HVH9fhwff3hz2e7bBajXr0yzVLi99Y4mXmwsMyCXK+Prkab94zXVrcmQ06jA9pOlYpdrFW2hlrc7CyoARrEhQaqSk9DhBKruY8vR5zn1mPR5YHLF53S03UCqK+LgvWIu16SUJhmS5FKZPw6cGmoIZQu6NoXwDAYtQp2rJGE7WfCik1YrCSoxV7z6peAB5p7MDsp9dj9h/XScFNNP69+RQAgLkM7padd0oBdolGQSQrp2KoFS+/vOEU/rDXgDtf3a44d58easQV//cZ5jyzLuqCSG5/GmqpKPU5cMR+T81KmQQFC9RImQS2IaFVHB+K2+vHr9/bi688+zkWvbUrIcdMBCwI7F9ghU7HSWUjhxs7ogZ8qSKSaJnRPwGZhJ7SIwBAv250XW6R3I2Uy41ifU8csnObFvlEX4CChBTAFuLRnI0Y46J0Xo6WSbiougA3TqzED68YGvHYoTXEPj8vHTNUkwAoe+K/t7MOAPDZ4aYwDQDbYWV18RNUNIhzeX3Somtov2zFx0waWIjlP74E14yrwP1fGRlWmhPw/g7fGWu3JzCTIJZ5NcnKjZRck+RBwrtf1uJrf9sknQP/2FCDO17ZiuZOF/bVCTvd4xQ6LcthzdQiZRLklqMMNpcnznVKnxPbxWcBU6QMj7TDHKFDNdOrKJV3yXskyLl8eD8MKLSiqcOFP605qnjcUJiTVVOHC7f+fTPe2n4m4mOPNnZgS00LdBzwjSnVAILPO6lTuaxUT6sgMtTBS+2O7DbR5ndzTSuuf/4LHDwrfP48z+OFtcfw3X9uR4fLC5fXj4NnI+9SB0TL4QGcWk2Cx+eXHqOUSZBboEbqpss+YyaS7Q7nO124/f9txutbhHKx9UfOJ12/ohYWBLIF8aDibJgNOjg9/rCAMR1gQUKkGnhmg9odh6OesD9lFHej63JgMye03Ejd90RekqlkCEIQvQ06y1PAWdHdqCI/fHEfimSDWtsetggPLHTCj2PQ6/DsrRfi29MHRTx2wOFIuPA1d7rg5wWxc6iLDSDrrisuorw+v+SKc77TLWVIGJJ4VlysRgt4pOc02+HngVyzQTH4YZTnW/DC7Rfhu5cMDruP/VAp7egmy91IqZFa6OM2nWjGord2w+31Y/aoUjzz9QnIMumx4Vgz5j37OTpdXliMOgwrDc+gyGEe3w6PT1FHcFLmJsSoLs6CXsehy+1Do80Fh9uHL44J5Vrfv0wIJJWyVQDQYg9fPMqJ1nU5UibBYtTjdzeMBQD8vy9qpLrpaLDFTr7VCLfPj/v/swcPfbBfcfHIFpdXjSrDvDHlAIJL9gJ6HnkmgfV8cKvyS2ewIIF9bmp3ZAPvx4DaVgdu+stGvLezFj9+Yyf+7+PD4HlI9rmhgnM5SvanDHm5UDTY+ctxwecw+574/AFxdKRMwniVXeJjsa+uHdf/+QtsO9mKXLMB2SY9HB6fKvvknoAFgWwzQq/jMKxM+OzTTZfg9PgkXVjETEKU66VaantItAx0z92oRcECFVD/PZHsT416aoRG9AkoSOhheJ6XdpFjaRIAYExlHvQ6Duc7XWGL8GiZBDWE1hA3ynzjlRyRQjMJO061BjnshC4OToUsVoU25UK5FSuVCoUthob0y9Z8EWblRko7Y20JzCSUKgiXlYIP9ji2E/uTWRfgxW9djK9eOADv/mgGqoqs0g/emMp8xbmXk2M2SKViSuJleV8ChtmgR5X4A37iXCc+P3oOTo8f/QusuOXiAeLtXYr1/i0R6ngZ0cqNTkvZpPCs0JUjS3H12HL4/Dx+/d6+mAtztqj+7XWjcd/s4QCAVzeexLdf3hr02na3F+/sqAUAfHPaQKnM7cT5LilIPGcL/+6w9+H186q7rwKB+Z55QQkAdTuy7XYPGsQxvPfDabh0WAkcHh/uW7ob/91zFgYdh8e+Oha3TxOyINEa4UmZBEv456N2h1Tu+iIXt1qMemkzgZXSRNIkjI9RTuj0+PDzt3dHzQB9fvQcFvx1I+rbnRhSko1lP56JS4YJ88oaJ8ZiX107fvzGLhxsi3z9eH9XHRYu+TJiB3ifn8dDH+zHvzadDLuvTmHXfKQoXo7lcLTjVAvueW07zsSRcVh7uAl3v7Yd++vjD5KONnbCzwvndqTfiURoEgKZhOT2SAC09zPheV7RAhVQn3HrrmiZIDINChJ6mFa7R1qUlyq4EoViMeoxvEzYAQr98e12kCC5kQjj2XhcaG41sFi5zCe0rGRViOg0dHyhZS85ZoOkM4jUmfb4OSZajr6bHo0BUWpsEypcFufd5fVLjjahO1QAUFWUBatRD6tRjxduuwg/mzsCOnEhNrI8Dx8svAQzLxDE1zOHFoc9PxSO46SaWqUgQancCAhoPI6f65Q+uzmjy1CcY5Z2RfcplBzFLjdSFrQDkTMJjAevG41skx47TrVGXTzyPC9lG0aW5+Gns4fh79+ahGyTHptONAeV63ywqx4dLi8GFmfh0gtKUCTrXs7eX2iPBED4PrDzQsmpKdK4WMZsuvjZqdmRPSyK1gtMPKoKs/DKnZPxPTErVpJjwhv3TMPtUwdKn9mJkP4WcqKd00yQGcu1hdnXKmWLQkvoIlmgsgaAhxs6FHUJqw404j87avHg+/sUd2x5nsdj/z0Il9ePy4f3w3sLZ2JovxypmzqzPI7G+7vqsOCvG/HxgSb884hOUctRc74Lv3h7D/675yyW765XPM6WE814deNJPPLhgbBsndKuuVrx8lMrD+OTA434wyfRLYfl/HnNUaw60IgFf90YcbyRYN+ZEWW5ETdd2He/vs0ZVwZNjlSClWRnIyCQSeh0eePSv9icXinQDd3MUesCxs6FZIuzCSJdoCChh8k26/Hvuy7GncN8qmsapaZqITv13Q0SzDJNgt/PSyUaCy7qr/h4VoLU0il0110lNqi6bHg/cXzBC0ylHW0mMt4dMUhgomXlQEUNlTJNQmiJViKDBItRLzXEOSrWYecrZBLyLEasvPdSfPaLK3DN+Iqw+wuzTXjtrql4f+FM/HjWMFWvzRbsrIMoQ+4oNTBEB8Dcoo41deLTQ4J97FxRQDyhKvIusJLrjRzpvAhZWLfbPdKPbqQgoSLfivvmCFmB3688FFGg22Bzwub0Qq/jJKemeWPK8e6PZqK6KEsq11mx9yz+vUUQLN8+tVoKxsaLPUfY+5NK9SI0DTzXoW6XsqnDBadHsHidJi5m2x0edMRwYGJlKZVZwvlp0Ovwm2tHY+W9l2L1ossxeZBg68u+B8wWWIlIPRLkt8XaIW2O8hmHHjeSJqEy34LibBO8fl4K2OSwTIDT48c7X9aG3f/l6VYcauiA2aDDc7dOlF6XdVPffrIlYsMvn5/HEx8dxE/f3AWX1w+TQQeHj8PvVx4JehzP83hg2T5pY2TLCeXsxGZR/+Lx8dgZIpKvbWMi3cA5PUJFkNDa5ca2k8JxP9rboKpcxuvzY7/oyuX0+PGTN3biqZWHVAukY+kRACGjrddxcPv8cTt7MXpSuJxnMUiBajwlR0yPkGXShy3y82UC/WjYWSM1yiQQfQQKEnoYs0GPqYOLcGGJ+h0bVssvF5Y63D6pw62SJkENJlHw6/b6sf7oOZxusSPXYsB1EyoVHy8vKznW1IlTzXaYDDr8+MoLAAhBDFuUy3dY5YtVVpKwN0Ld8okEZBL6i+VGXW5f2EU/oEnofp8EIBCgsTS0UiYBELIzSmJwhl7HYUJVQcQFWChsJ6wlJJMQ6iglh+1Kf7jnLJq73MizGDBZ7DEhNe5TChJiaBKKZMGjnFNikNgv16zoisS4c8YgjKrIQ5vdgyc+OqT4GFbGMaQkO0ioPqI8Fx/8eKZUrvOj17/EvjobTAYdbp5UJT1ufEigHSnAlnolqMwksKxNZYEF+VlG6XOJlU1g76ciJHYaWZ4XdG4yV6r6dqeizTAgdzcKn2O58DgaLDhT0iKF7rpG0iRwHCeb5/DzSJ4J+PeWU2EB/L83C5sU102oDJqDkeV5yLMY0OX2YV99ePDR7vDgrle34e/rTgAAfnTFULx+18XgwGPZ7rNShhQAlu85iy+OBf7eUtOi2HRRHjxslvXy8Pl5nG0TSiXl/QDYIvxkc1fE3e1PDzVJ/TTcPn/UzBnjSGMnXF4/cs0G3HOZ0ITrL58dx92vbVdlBcwyVpH0CIAQoDKnPS0lR0JQLJybPaFJ4DhO1lBNfclRpEZqQOTvSagFsVyTQBB9AQoSMgDmCrTzdJvk88x2UCxGnSRujBe5uxH7gV5w0YCICzrJD7/LJTnjzBxajAurhcWtzemVFk3yHVb5DwcrSVASYvM8L8skaA8SLEa9ZGcprw/3+PxSDXIiMglAuP2skgVqMmAL89DGdKGOUnJY4MV2ja8cWSot+CZIGZ62sNdimYlImoSAkNAdtEAK1aREwqDX4bGvjgXHAf/ZUYtjTeG7sdF2RAuyTEHlOgBw7biKIJtDuQGAxxdotBf6+bHz5rzK7rNsvgeKmgupvrslepDA3g/LJESiMNskfdahjfAY0YTLbLFtU6lJUJNJiBQkAIF5Dj2PmjtdOCpmQ6xGPU6c68Km481B9/93z1kAwLemDQx6rl7HYYoYzCrt/P/q3b1Yd+QcLEYd/vSNC3H/V0ZiYlUBZpYJc/ubZfvg8gobBr/78AAAIZAw6jmcbXfiTMhn5fT4sPNMYPzy12y0OeH18zDouKCgv1+OGUXZJvj5QFYxFFbixzJ6S7acjpkR2FsnjGNs/3z8av4oPPv1iTAbdPj0UBN+smSnYoAj55CKTAIQWNxrcThiZZ1F2aaomwGJhF1zWFM7NUTSIwAy7Y7sesrzPG75+yZc9fRn0uaJg4IEoo9BQUIGMKoiDyPKctHp8uLJlcJOq7wZlFaBr1n8sT/Z3CW5FH0z5AdaTpHMxSZQ014Oo16H0RWCcI8tDuQ7rPJFxeiKPBh0HJq73KgPEWKf73Sjw+kFx0UuT1FLfwVbP/lCKc+SmB+z8M7UiclQxCJSQ7VQRyk5Q0JKuFivAgAYI2Z4alsdQcc802LH1pNCucXkQYWKY+lfYMWAQivcPj8+FBd6scYSykXVhbhEFP5+fvR82P2xvN5Zuc5zt07ENeMq8LN5I4Lul3cvZ03sDLIGgQx5wKOG0Pcoec5HySTwPC/t8FbECBIASA0VI+kSogmXA7XW0d+PUo+EwDGCb4skXAYCGZvQjBSzrx1RloubxHJGVhYGAG/vqIXb58e4/vmYIG4kyJF0CSEduuvbHPhon3DOvf69abhelgW9ptqPkhwTTpzrwkvrT+CPnxzGuQ4XhvTLxk9nD5MCms0hgujdZ9rg9vqlcsydZ9qk4Jd9rpUF1iCBN8dxGCFqx5ScupweH9YfFdzEfn/TeORZBEer9UfOhT02aCziPI4XywFvvLA/3vr+dJj0Oqw7cg7/3Xs24nNbutxSxozp2iIxoKAbQUJboG9ET8HOs/UK14pIsNLM0B4JgHJZ3t66dhw/1wWPj8evl+2Fz88HNAlUbkT0EShIyAD0Og6PflWwi3xz2xlsP9mi6PMeLyyT8K/Np+DngelDinFBFPvNIkks68EucaftqlFC59zQxUHoDisjSIgt260DAg4uAwqt3RaGDVDolcBSyblmQ0wHIbXId6J1HCSNQrIJaBJCMwmRd++Ls03Sj6FRz+FyUUsCCD+SbDEq1768sfU0eB4Ynu+XGvSFotNxUi8C1sBMGIvyORCJaUMiC1QDO6LKXWMZN0zsjxduvyhswSLvXr7moKDHKMkxS5oFRnG2tnIjNt8Bz/nIZRv17U50OL3CbrSKdZUkOI+gS4ims2E7pF1uX9Q+A2ozCUY9F3VTgpVGHjvXGeQcxBb3U4cUSRsRn+xvRJNNEMsuEfVQ3xTdnEJhuoRtNS1Bu+9vbj0NPw9MG1KESQODg9gsA7D4K0Kw+KdPj+Ff4rn56A1jpbJPIPx8Y2OdPboMJTlmuL1+7BavVaH2p3Ki6RI2HW+G3e1DeZ4FkwcV4mtiKZz8+6IEu54yTQ0ATKgqkPrfPLL8QET9CwtWqouykB0j2xzNNjoWPalHYLANjtUHGlWLrVujNLxkJXXy74ncmGNPbTte33Iq4G5EmQSij0BBQoYweVCRZFX5m2X7UN8WuduyWliQwBY60bIIQHgt54SqAinlLi/nAKLvIjORbKh4mTkbdafUiKH0oyfZnyawJEhe055vNYYtOpNFQJMQvECI5GwECLudLJswfWgJckN2nseFBHour0+qm76kLPoP8dcnV8Go57DrTJvkIBRtLEpMExeCW08G14l7fH5pgRyttjoW7BxdI4q2lQT/JbnhwmW/n8cjyw/g+U/Dm76FujepySQw0fLgkiyokaCwzyxSJoHVpisFCXmy26KJMiXhssL1RK5JiFZqBAibFhX5FvA8sF+modosluxMHVyMURV5mDSwEF4/jze3nVGlhxpdkYccswEdLq8kivb4/Hhzm3B+Rrp2XTe+HDMvKIbb6wfPA1+9sD9miBmrqWJQujmkhIn9PW1wkRScsMBByf6Uwc5NJRtUVp45e3QpOI6TrG0/PdwUMaB0eX3SQj+0q/wPrxiKQcVZaOpw4Y+fHFF6Og6dVVdqBCSm3Kgng4TpQ4uRbdKjqcMVsQlkKNE0CfJrIfuesCCBXZf+b+Vh6XeNhMtEX4GChAzif68ehcIsIw41dODF9YJIT6uzERDcMbJfrhlzx5RFebSwQJAvRObKylVYTfu++nb4/HzUHe2LqoUdv08ONAQtBlkmgYk1u8MAhR+9t8UFb1UCvbzl8x9JtJwMImkSlByl5LDd+psuDHewCtSTCz+6K/c14HynG2W5Zowtih4klOSY8ZWxgnPT62IZSTzlRoAgnrYYdWjpckv16wBw8nwX3D4/sk36bpU0SM5a4q6wYpCgIFxed+Qc/rGhBn/45Iikz2CE9oFQOu9CYYvIWCUgDMkGNUKvhEDH5fAgQa/jpOxWNHvHlqjlRuqDBABh4uU2u1sqr2LaApYxeGPraby2SThfoumhDHqdVO7GFvGrDjSiqcOFkhwz5o4uV3wex3H43Q1jYTHqUJhlxK/mj5LumzSwEHodh7o2h7RQd3v9+FJ0M5o6pBjTWLZBLEmK1jRsYnUBAMFKWm4l7PfzWH0wUJ4JCJ/pjKHF4HlhDpQ4eLYDHh+PomxT2ALcYtTjdzcK2eXXNp1UtC6OVaInh2XA6jQIl6U56cFyI7NBj8tHCJnQUCvuSLRGMWDQ6zipBLXN7sGZFjsONXRAr+Pwwm0XYcKAfHS4vHh1w0kAZIFK9B0oSMggirJNWCz+yLGGbN0JEuROOrdOrlK1AJAvIuQ17UP65SDLpIfd7cPxc52BUhOFBeLV4yqQbQoXL0qi5VLt9qeM0J2xHadapF3HRXOHd/v4DLmzVCIzFLFQ0iREcpSSc+/sYfj43stwo2KQEOwA9LooZv/6xQMQpQxd4ptThYXfsp31ONfhks7RWMJlhsmgk0pG5GJRaVFdntutTE3obqySK5gkXJZZK8pLQthiDxB28NnCQ9IkqAgSJBF2mbpgWMoknOtSLK2wOaKL8dU0iopWbhRPJgEIFy9vrWkBzwt2rux6dfXYChRmGXG23SnZ8UYqNWKwnX+2q/8vMbj4xpSqqK5gQ/rlYNV9l+Ojn14WdL3MMRswVtTisJKjPbVtcHr8KMo2YVhpjvSaO061wu31B/oBKGw0jCzPw7XjK+DngV+/t1cqi9pT145zHS7kmA3SrjQQEGgv3XZGarQohznAjeufr1jidemwfrh+QmXY6zEONcaRSZBpEmKJoUOJNifJhP3+qA4SuiKXGwGB63e7wyMd8+KBhSjOMeOxr46Djgv0FCLhMtFXoCAhw/jaRQMwZVDgh0ar/SkQaIqk4yDVlMeCLSIGFmdhmEy/oNdx0g/untp2qQxDqdNujtmAr4rixX/JFmCsnCIxmYTAzpjH58ev39sHALjl4gGSB30iSFUmoVBBkxDJUUqO2aCPuGgYU5kHHSccZ/2Rc9h6sgV6HYebL1bumxHKlMFFGF6WA4fHhz9/ehQ8L3zWkaxTlWACVbntZDw7otEYXZEfJDaNmkkQhcu1rXZ8erhJul++IGHWiCU5JslhjJ13LV3uiJalh6VMgrrzvKooCwYdB4fHJwVeDLfXL9VJKwmXAbkoU1m87PMHOtEqZRLkGQqTimhxfIhl8+YTTI8QaBRoMepxy8UBi9ppQ4pwQWn0z5dpCLadbMHRxg5sOtGs+tpVVZSFcoUO96GZAhaATBlUBI7jMKw0B0XZJjg9fuyta4u5a/7AtaORazZgd207logZglUHGgAAl4/oF2TfO3t0GUpzzTjf6cbK/Q1hx2IZvQkhwa2c31w7KvB6MiG438/jqAr7U0ZFgQUcJzSGjLeTsaTT6MFyIwC4ckQp9DoOhxs7gmxKI8HsopWEy0DAdKLd4Q5qNgkI7lJ3zBgkPdZqoqUT0TdIuzN9/fr1uO6661BZWQmO47Bs2bKg+3mex4MPPoiKigpYrVbMnj0bR4+G1wr3VnSiiNkgLnZCm0HFA6urnDWyTGpAFgu2iJo9qixsd4v1QPji6DmptCFSqYkkXjzQiEabEy6vD2fEwCIhmQTx/dicXvx5zVEcauhAYZYR/3v1qBjPjA/5QjO0M20ykYTLshKSHaeEMolQRym1ZJkMUgnMg+8LQdWcUWWSh3osOI7D7VOFz5UJUZWsWKMhF5OyHU1JtKyyPCcSVpM+KLBVChKKxfPb7vbB7vZKwm22m7/5RLOkAWAlddWyTEm+1YhcMWBQ6vjt8fmljJna92PU66SM3PGQkiOWHeCiiOZZQHksgvD5WFMn2Oax0gJKfl4bVYgomMj2VLMdbXa3tABnny3jtqmBxX0sPRQgLNSyTHq02T347Qf7AcR37VIiVHMg6RHE2zmOk8a9+USLbNdc+TXL8iz4ueis9dTKQ2jqcEoLTnl5JiB8rrcqCP4ZTBs0TszMKFGaa8EvRHH2o/89iPd31QEAzrTaYXf7YDLoIhoOyDEb9CgTTTB2hRhKRKPL5ZWuQT0dJBRkmaQNs08OhAdZcnieD1g5R9jMYcH0qWY7topN7+RlbIvmDEeZ+HvbU1avBJFq0i5I6OrqwoQJE/DCCy8o3v/UU0/hT3/6E/72t79hy5YtyM7Oxrx58+B0OhUf3xsZXpaLJxeMx/UTKjFjaInm43x9chWuHluOX80fqfo537t0MK4ZVyE19pHDeiCwH0X5DmsoI8vzcPHAQvj8PN7ceganmu3w84LzUHfE2Ixss0FKK/957TEAwOL5o+La1VZDUZZJ2p1OVIM2NRSKPQscHh8cbuHf4ysOAgCuGacs/lTDODHQO6lSzB7KVy/qD6tRD69Y+hCvlS1rKHe+0yVllg43CuLNWM5Gqo4vW3ApnWfZJj0sRuGyeLbdiaViidov5o7A0H7Z8Ph4rDss2FayZnEDQxZhUsmRgnj5hGipmGM2SE3/1DBE0iUEi5dZwJJrNkQsxWK7oc9/ekxyRWPwPI+HxAX37FGlisFlvJqE/Cyj9LlvONaMA6LQeJoskwAI87b46pG4fWo15o1R1hTIMeoD5WgbxTLFWCVKsbh4UBF0nLAwrG21S4G2POvBgoTlu+vh9vqh46CYlWB8c9pAjOufjw6nF//zxk4caeyEQcfhiuGlYY/9xpQq6HUctta0SNa8AGB3e3FU7BcSLZMAALdPHYjZo8rg8vrx0zd34fcfHZLE3Rf0y1Ht5DZ/nKApenzFwYgN4UJhQVOexRAxk5VM1JYcba1pQW2rA1ajHmMjzCcrN1q2qx4+P48RZblBm1y5FiOev+0izBtTFmS1SxC9mbQLEq6++mo8+uij+OpXvxp2H8/zePbZZ/Gb3/wGN9xwA8aPH4/XXnsN9fX1YRmH3s6CSQPwp29c2C0B1ZjKfPz1m5Pi6m588aAivHD7RYrdg9mPWZfoJV0doxadLUDf2Hpa+oEc0i9bc9+HUNhijecFj/+vXTQgIceVo9NxUh17aGfaZJJjNkh+9a12N/786VHUtjrQv8CK/7nqAs3HHS/zqB9cko0ZQ4sjP1iBPIsRN14Y+AFVK1pmWIx6XCiOYcuJFnS6vFKzq+6WGwEBv3lAOQvHcZxkg/r65tM43+lGaa4Zs0eXSaJTtiA5rZBJAKKLl5lbzfCynLjOc8kGNUImQUm0zLhtSjXG9s+DzenFE2IgyVi2qw6bTjTDbNDht9eNUXy+PPhVm6FiuoR/bKgBzwvnktI14/uXD8VjXx2n+rjyQKO6KAuXDesX5dGxybMYMaZSOCde/qIGdrcPBVnGoCwPCxikLtn51qjj1es4qTkgK7WaMrhIUbNUkW/FVSOF4OF1WTZhf70Nfh4oz7OE9WJRer2/f2sSfiTaov5t3XH88p29AOL7ztw7ZxhKc82oOd+Fv607ruo5AWejntUjMFiQsO1kS5gdtJx/i5nNGy+sjFmWx4wNZo8OD+omDyrC3791MapU6qwIItPJqJxZTU0NGhoa/n97dx4eVX3vD/w9Wyb7TBayTMjK0rCvIcSAbFE2CwhVCIvYQvmJUEG9iNWmiK0i9qe2CBfE22JdWi29gIhBDRAIWAyQsC8JaAgQSNiyhySTme/9YzIHDpNlsk5C3q/nyfPAWT/zmfVzzndBXFyctEyn0yE6OhoHDx7EjBkzatyvoqICFRV3r6AVFVUPoWc0wmisf2r75mY9pyPO3ZICPTTQuahRWN2RMtjLpc7HGBfpCy9XDXKLyrExxfKlFO7j2ui83J9Xg84Zp3KKoFYq8NpjkTCZqmCy7wJZg/i6OyGvqAKeWmWrPqd6Fw1ulFTiPxduSKNd/W7Cz6BRiEbH0dP/7lXxGYODYDJVNfj1On1QEP55yHIFvrPOucGxRIXqkZp1Gwd/vIGuvpYf3H4eWrg7KZqc35739APQO6tqPJ6PuwY5BXekUZqeHBQEmE0Y3d0HG/b9iOSM6ygrr8DFm9Xzeui1suMEVl9lvnyrxOb4Z69ampB083NvUF5DvS3HvHC9WLZ9fonlDqqns7rO46x8rAd+sTEVW47m4PH+gRga4Y3CO0b8cYelaFg0MgIBHpoaj+GiutuRVaO0L95ege746vjdJnBRofpmeW8MCr57N2l69euzpvd0Q3IbFarHyZxCqYnc4BC97LgR3s7Qu2ikeVYCddp6j9vD3w2zhwTjk1TL+2D0z3xr3WdGVBC+O5OH/03PwfNjusBNq8bRbEtx0dvgYXfenh/TBd06ueK3205LxWNXP/s/T11UwCvjf4al/zqB/977Iyb29pM1VbqSfwerdp6DqliB0RWWH+TZN6tnDrcjJy0hwEODSH93nMsrwa4z1zClv+0V/pslFfimesK96YOCao3TUyu/4Daqe+3PWXN7UH8TOBrzWjt7c9KuioTcXEu7Q39/edtOf39/aV1NVq1ahZUrV9os/+677+Dq6rgrAklJSQ47d0sJcFKi8I7lKlvFrStITLxc5/YD9UrsLlPixJXqwu12/fvUx5pX5xIFABVGB5pwIW0/LjTpqLVzNyoBKHHzp9NIvHWqhc5iS21SAVDg99tOoMqsQG8vMyqzjiAxq/HHrDIDnhoVqgTgcfMMEhPPSOsa8nrtrlPifKECxRdPIPHGiQbFIAotz1vKuWtwLckBoIK38g4SExMbdJyaVJkBd40KZjNw7D97caqGC8KmUsvzWVFlhhICnYoykZiYCbOw7FtcXoW1X3yLczlKAArkZBxD4tVj0v5F1yzxHz7zExKr5K+6/ecsx666mY2kpIsA7Mur5UabGmcu35LlYccly/GU5YX15ifWT4kDeUq8+M/DWN7PhC0XlbhVqoS/i0BQ8TkkJp6rdV9nlQrlJgWKi+o/DwCUFlnitXIqvITExLonDrNHlRnQOalQaQL0t88i8b47I/ezJ7fK25bnq6J6hCH3O7k2jzHYWYmC6s81Reltu3LQywzonVQorQLUuaeRmHi6xu3MAvDVqnCzogqr/pGEh/wFvj1veV61pbax1PlYACyOBP4nQ4WCSgWMOfXnSEYAkTolzhUCizftx8IeZigUwIVC4G+ZKpRWWXJ1ce0ePNXNjP05ljiNBXnN8v5sjBC1EuegxKfJJ+B0z/vQKilHAaNJhVB3gexjB5BtuwkA4GqO5bEBgKdG4PLx75HTsI+uJnsQfxO0BcyrrbIy+4Y7bldFQmP99re/xQsvvCD9v6ioCMHBwXj00Ufh6dn0ds4NZTQakZSUhEceeQQaTeu342xJZzXnkZFi+ZUaF90PE2q4snOvPvll2PPeAanj5LjYgRhXz3wNtbk/r4+YzPj1jVL8rIFNOxpqtNGE7FtlDW5C0lT/yD2Ma1n5KKtSwEWjxNpfDW+WscqHjqiAWQipw3JjXq8Pj6nCjeIKhPs2vBP6qEoTNmbsQWElkKv2B3ATsb3DMaG6g2ZTDXnYMstvbR1eD1Sexuk0SwfQMT38MfPx/tK6/xhPY3NaDm65haDQaNlm+sQxUod+AFCezsOX2cchXL0wYUK07Nhvn00BUI7HR0djYGcPu/OaX1aJP5/ai4JKBUbGPQpXJzUqq8x4/f+nAKjEgkf7Y3zvutv1D7tjxNg13+N6SSV2lwbhP9ctzabeiY+y6VR8v7fPpiCnoBz+vt6YMCGqzm0BoKSiCmvP7JHe1wumjJLusDRVzIgKVJlFncdryGs29o4Rf12VLMX69IRY9DLIvxfy9Nk4uTMDADCkd1dMsLNJ38gxllGu6pubJVd3Eau/zcTJO3r8YfxQvJf5PYAyTBsVheHdGt7vbFZFFXLy79g1/On9eg8tw4S1/0FGIWAO7ofCO0asT81AlVmgSydXXLpVirMFSnzwk3t1v69CxA7ogQkPNaz/UnMJzinEdxtScb5EgzGPjIT2nia4JrPA2+/tB1COZx/tjQk1DP1sVZp2BdsvWS6KTOgfjMcm9mzp0CUP8m8CR2Jea2dtUVOfdlUkBARYvgTz8vIQGBgoLc/Ly0P//v1r3U+r1UKrtW1/rNFoHPrCcfT5W0L/EG8AliIh3M+z3scX4afDiO6dsLe6M2j3AF2Tc2LNq0YD9Alueidoe87X27V5fgA1hLfb3ce2JK47wjo1T8Eb5F1z/hvyevXSaODl3riCRaPRoF9nPY5k5yPl/E0AQE+DvtneK8E+dR+nk8fd5/Kph8Jk5x3bKxCb03Lw5fFrEAJwdVIhQC/vRxPma/lhllNQLtu3uNyInOqZ0nt39oJGY9nHnrz66TTwdnPC7dJKXC6oRO8gF3xz5ipulVr6TIzvG1Rvu34fjQYJj/XEks+PIfGUpUCYOjAIw7rXX5TrXZ2QU1AOrUZt1/PgpdGgayd3nL9egmBvF4T4Nr0/iZWhltdnTezJra9Gg8gAT5y9VgQPZzX6BHvLhsoFgIe6dgJgKRJCfNzsfi0G6O3bbsaQULy3+wLOXCvGwYuF0sABA0J9GvW6b8r7r2uADotGdsV7uzLx8pbT0twAk/sb8Ief98AnX36Lz7LdcfFWGS5WT2cS4uPusO+yAaE+CPB0Rm5ROQ5fKsKoyLt9Cfafy0NOQTl0LhpMHhAMTR19+Lzd777vx/YOdMjjeRB/E7QFzKste/PR5jou1yU8PBwBAQHYvXu3tKyoqAipqamIiYlxYGRk1e+ejqH2jmwzu3rYTKWi4aPhdGQ+1R2mu/u7Y96wcAdH07ysQ1Nar+425opoY1nnHgnzcUXsfaOHDevmCxeNCuVGyw+nmoZ4tXaYv1FcIRslxto5P8DTuVEjYXWpHobV2nnZOmzmjCEhdnf8ndTPgNiulo64Ohf5DMR1sXbKb8jQutbOy9a5L9oy652UqDDbAgEAegR6SkPMtkQnXS83JzzW13Lhyzr8cIi3a61j+re0Z0ZGIMLXDZUmS3Oj346PxJ+n94eLkwqd3YAtz0RLs2cDtQ8J2xoUCoXUyfitneekobSBuxPuPTGoc72DfFiHCnZzUjV4wAaiB1Wbu5NQUlKCCxfutuPNysrCsWPH4O3tjZCQECxduhR//OMf0a1bN4SHhyMhIQEGgwFTpkxxXNAkCdS54NmRXSztbO0cynRUpB/mDQtHoM6Z0903wMwhobhZXImlj3Rr1LwIbdnQCB+sS7Z0ZlcpFejq1/QJ9uz1834GpGbdxlMxYTbDijprVBjezRffVY9wVFNR6+WqkWYfv1pwRxo9TJrvoZEFT4SvOw5fzMdPN0pxPq8YqVmWye7ihwTXv3M1hUKBt6b2xcqvzmBmdLDd71HryC9Oavub0y0cGYGSCqM06k5b9uuHI5BbWI5nR9Ucq0qpwMpJvXAkO7/eplmNNXtoKLak50jzb/SpZ+jTlqRVq7AmfgDW7rmA+OgQjOguH0XKx12Lz+ZH4y+7zuNmSQV6BrZ+s917/So2HN+cykVGXjEmrT2A/541CJ29XLA303KHepYdQzkPDvNG/JAQDA71kk16R9SRtbki4ciRIxg1apT0f2tfgrlz5+Kjjz7CSy+9hNLSUixYsAAFBQUYNmwYvvnmGzg7t35zD6rZS+Psn3cBsHwBJzzWeu0/HxQ9DZ7YMGeQo8NoEYNCvaBWKlBlFgjzcW3V4tHHXYv1s2vP6yM9/e8pEmz7XCgUCgTpXXD+egly7ikSmjpztHWSwR9vlOCz6pF4xkT6IVDXsKu4wd6u+J+5gxu0j656NtqGFKNd/TzwwZyGncdRgvQu9b6Xpg7sjKktMIyy1YBgPXoGekrzStQ3P0JL6x2kqzMnGpVSmjjO0SI6uWP74mH4f5+k4WROIWb/NRV9O+sgBDC8m69dfaNUSgVWTe3TCtEStR9t7vLjyJEjIYSw+fvoo48AWL6AX3/9deTm5qK8vBy7du1C9+7dHRs0ETUrVye1dCU1shkmUWtOY3r4w3qDoba5QO6fK6HKZMbRSwUAmnYnAQDOXC3C/6ZdAdDwye4ay3on4UG7Y9WWKBQK2fPZp3rmarKPQe+Czc/EYEp/A0xmIb3frLPAE1HD8ROfiNok62g9sV0bP6t4S/B2c8LoSEuhYJ0B+H7SrMv5ZcgvrcTcTYdwMqcQKqWi1n3qE1HdJ+Gnm6UorqhCqI8rhrVSbrpXzy9R3yg91DST+xvg56GFt5sT+jr4TkJ75KxR4b3p/fHKhEgoFZb3TFwP20nRiMg+ba65ERERAMwfFoER3f3QrRX7I9jrLzP640ZxBcJqacZg7dz6w0+38dXxa7h0uwyuTiq8+2S/Gpso2SPY2xUalQJGk6U39+zoUJs+Ey1lSv8g9Aj0bJPPxYPETavG188Nh1kIuGn59dwYCoUCCx7ugsn9g6BVK6Hm3S+iRuOnEBG1SUqlolVHNWoIN626zh9x1vkqrDMOB3u74MOnBjep6ZRGpUSItyt+vFEKJ7USvxjUcu3j76dUKtDDwZ1TO4pOHi0/bHNH4O/JfopETcUSm4iomQXf01chtqsPti8a1ix9K7pUd4J+rG+gw4bHJCKijoF3EoiImlmfIB2mDw5GoN4Zi0d1bbYmDwtHdoFGrcSLj7aNUWWIiOjBxSKBiKiZqZQKrP5F32Y/7oAQL6yb2biOz0RERA3B5kZERERERCTDIoGIiIiIiGRYJBARERERkQyLBCIiIiIikmGRQEREREREMiwSiIiIiIhIhkUCERERERHJsEggIiIiIiIZFglERERERCTDIoGIiIiIiGRYJBARERERkYza0QE4ghACAFBUVOSQ8xuNRpSVlaGoqAgajcYhMTyImNeWwby2DOa15TC3LYN5bRnMa8tgXmtn/f1r/T1cmw5ZJBQXFwMAgoODHRwJEREREVHrKy4uhk6nq3W9QtRXRjyAzGYzrl69Cg8PDygUilY/f1FREYKDg3H58mV4enq2+vkfVMxry2BeWwbz2nKY25bBvLYM5rVlMK+1E0KguLgYBoMBSmXtPQ865J0EpVKJzp07OzoMeHp68oXbApjXlsG8tgzmteUwty2DeW0ZzGvLYF5rVtcdBCt2XCYiIiIiIhkWCUREREREJMMiwQG0Wi1WrFgBrVbr6FAeKMxry2BeWwbz2nKY25bBvLYM5rVlMK9N1yE7LhMRERERUe14J4GIiIiIiGRYJBARERERkQyLBCIiIiIikmGR0MrWrVuHsLAwODs7Izo6GocOHXJ0SO3KqlWrEBUVBQ8PD/j5+WHKlCnIyMiQbVNeXo5FixbBx8cH7u7umDZtGvLy8hwUcfv01ltvQaFQYOnSpdIy5rXxcnJyMHv2bPj4+MDFxQV9+vTBkSNHpPVCCPz+979HYGAgXFxcEBcXh/Pnzzsw4rbPZDIhISEB4eHhcHFxQZcuXfCHP/wB93azY17rl5KSgp///OcwGAxQKBTYtm2bbL09Obx9+zZmzZoFT09P6PV6zJs3DyUlJa34KNqeuvJqNBqxfPly9OnTB25ubjAYDHjqqadw9epV2TGY15rV95q91zPPPAOFQoE///nPsuXMrX1YJLSiL774Ai+88AJWrFiB9PR09OvXD2PHjsX169cdHVq7sW/fPixatAg//PADkpKSYDQa8eijj6K0tFTa5vnnn8dXX32FzZs3Y9++fbh69SqmTp3qwKjbl8OHD+ODDz5A3759ZcuZ18bJz89HbGwsNBoNdu7ciTNnzuCdd96Bl5eXtM3bb7+NNWvWYMOGDUhNTYWbmxvGjh2L8vJyB0betq1evRrr16/H2rVrcfbsWaxevRpvv/023n//fWkb5rV+paWl6NevH9atW1fjentyOGvWLJw+fRpJSUnYsWMHUlJSsGDBgtZ6CG1SXXktKytDeno6EhISkJ6eji1btiAjIwOTJk2Sbce81qy+16zV1q1b8cMPP8BgMNisY27tJKjVDBkyRCxatEj6v8lkEgaDQaxatcqBUbVv169fFwDEvn37hBBCFBQUCI1GIzZv3ixtc/bsWQFAHDx40FFhthvFxcWiW7duIikpSYwYMUIsWbJECMG8NsXy5cvFsGHDal1vNptFQECA+NOf/iQtKygoEFqtVvzzn/9sjRDbpYkTJ4pf/epXsmVTp04Vs2bNEkIwr40BQGzdulX6vz05PHPmjAAgDh8+LG2zc+dOoVAoRE5OTqvF3pbdn9eaHDp0SAAQ2dnZQgjm1V615fbKlSsiKChInDp1SoSGhor33ntPWsfc2o93ElpJZWUl0tLSEBcXJy1TKpWIi4vDwYMHHRhZ+1ZYWAgA8Pb2BgCkpaXBaDTK8hwZGYmQkBDm2Q6LFi3CxIkTZfkDmNem2L59OwYPHownnngCfn5+GDBgAD788ENpfVZWFnJzc2W51el0iI6OZm7r8NBDD2H37t3IzMwEABw/fhwHDhzA+PHjATCvzcGeHB48eBB6vR6DBw+WtomLi4NSqURqamqrx9xeFRYWQqFQQK/XA2Bem8JsNmPOnDlYtmwZevXqZbOeubWf2tEBdBQ3b96EyWSCv7+/bLm/vz/OnTvnoKjaN7PZjKVLlyI2Nha9e/cGAOTm5sLJyUn6oLXy9/dHbm6uA6JsPz7//HOkp6fj8OHDNuuY18b76aefsH79erzwwgt45ZVXcPjwYTz33HNwcnLC3LlzpfzV9NnA3Nbu5ZdfRlFRESIjI6FSqWAymfDGG29g1qxZAMC8NgN7cpibmws/Pz/ZerVaDW9vb+bZTuXl5Vi+fDni4+Ph6ekJgHltitWrV0OtVuO5556rcT1zaz8WCdRuLVq0CKdOncKBAwccHUq7d/nyZSxZsgRJSUlwdnZ2dDgPFLPZjMGDB+PNN98EAAwYMACnTp3Chg0bMHfuXAdH137961//wmeffYZ//OMf6NWrF44dO4alS5fCYDAwr9RuGI1GPPnkkxBCYP369Y4Op91LS0vDX/7yF6Snp0OhUDg6nHaPzY1aia+vL1Qqlc1oMHl5eQgICHBQVO3X4sWLsWPHDiQnJ6Nz587S8oCAAFRWVqKgoEC2PfNct7S0NFy/fh0DBw6EWq2GWq3Gvn37sGbNGqjVavj7+zOvjRQYGIiePXvKlvXo0QOXLl0CACl//GxomGXLluHll1/GjBkz0KdPH8yZMwfPP/88Vq1aBYB5bQ725DAgIMBm8I2qqircvn2bea6HtUDIzs5GUlKSdBcBYF4ba//+/bh+/TpCQkKk77Ls7Gy8+OKLCAsLA8DcNgSLhFbi5OSEQYMGYffu3dIys9mM3bt3IyYmxoGRtS9CCCxevBhbt27Fnj17EB4eLls/aNAgaDQaWZ4zMjJw6dIl5rkOY8aMwcmTJ3Hs2DHpb/DgwZg1a5b0b+a1cWJjY22G6c3MzERoaCgAIDw8HAEBAbLcFhUVITU1lbmtQ1lZGZRK+VeYSqWC2WwGwLw2B3tyGBMTg4KCAqSlpUnb7NmzB2azGdHR0a0ec3thLRDOnz+PXbt2wcfHR7aeeW2cOXPm4MSJE7LvMoPBgGXLluHbb78FwNw2iKN7Tnckn3/+udBqteKjjz4SZ86cEQsWLBB6vV7k5uY6OrR2Y+HChUKn04m9e/eKa9euSX9lZWXSNs8884wICQkRe/bsEUeOHBExMTEiJibGgVG3T/eObiQE89pYhw4dEmq1Wrzxxhvi/Pnz4rPPPhOurq7i008/lbZ56623hF6vF19++aU4ceKEmDx5sggPDxd37txxYORt29y5c0VQUJDYsWOHyMrKElu2bBG+vr7ipZdekrZhXutXXFwsjh49Ko4ePSoAiHfffVccPXpUGmXHnhyOGzdODBgwQKSmpooDBw6Ibt26ifj4eEc9pDahrrxWVlaKSZMmic6dO4tjx47JvssqKiqkYzCvNavvNXu/+0c3EoK5tReLhFb2/vvvi5CQEOHk5CSGDBkifvjhB0eH1K4AqPFv06ZN0jZ37twRzz77rPDy8hKurq7i8ccfF9euXXNc0O3U/UUC89p4X331lejdu7fQarUiMjJSbNy4UbbebDaLhIQE4e/vL7RarRgzZozIyMhwULTtQ1FRkViyZIkICQkRzs7OIiIiQrz66quyH1nMa/2Sk5Nr/EydO3euEMK+HN66dUvEx8cLd3d34enpKX75y1+K4uJiBzyatqOuvGZlZdX6XZacnCwdg3mtWX2v2fvVVCQwt/ZRCHHP9JRERERERNThsU8CERERERHJsEggIiIiIiIZFglERERERCTDIoGIiIiIiGRYJBARERERkQyLBCIiIiIikmGRQEREREREMiwSiIiIiIhIhkUCERE12WuvvQaFQoG9e/c6OhSEhYUhLCzM0WEQEbVrLBKIiDqAixcvQqFQ1PnHH9ZERGSldnQARETUerp06YLZs2fXuE6v1zf6uIsXL8aMGTMQEhLS6GMQEVHbwSKBiKgD6dq1K1577bVmP66vry98fX2b/bhEROQYbG5EREQ2FAoFRo4ciStXriA+Ph6+vr5wdXVFbGwsdu3aZbN9bX0SkpOTMX78eBgMBmi1Wvj7+2P48OHYuHGjzTG+//57TJw4Ed7e3nB2dkZkZCRWrFiBsrKyGmP88ssvERUVBRcXF/j7++PXv/418vPza31MlZWVePfddzFw4EC4ubnBw8MDw4cPx/bt2xuWHCKiDoBFAhER1Sg/Px+xsbE4f/485s+fj/j4eBw/fhzjxo3Dtm3b6t3/66+/xpgxY5CamoqxY8fixRdfxKRJk1BRUYFPPvlEtu3mzZsxYsQI7N27F1OmTMHSpUvh6uqK119/HaNHj0Z5ebls+48//hhTpkxBZmYm5syZg7lz5+L7779HXFwcKisrbWKpqKiQYhBCYN68eZg9ezays7MxefJkrF27tkm5IiJ60CiEEMLRQRARUcu6ePEiwsPD6+yTMHToUIwbNw6A5U4CAMycOROffvqp9P8TJ04gKioKOp0O2dnZcHFxAWC5k7By5UokJydj5MiRAIBp06Zhy5YtOHbsGPr16yc7161bt+Dj4wMAKCoqQkhICMrLy3Ho0CH07dsXAGA2mzFz5kx88cUXeP3115GQkCBtHxwcDJPJhPT0dHTv3h0AYDQaERcXh5SUFISGhuLixYvS+V599VW8+eabSEhIwMqVK6XHU1xcjNGjR+PEiRPIysqCwWBoUp6JiB4YgoiIHnhZWVkCQJ1/S5YskbYHIFQqlbh48aLNsebNmycAiH//+9/SshUrVggAIjk5WVo2depUAUBkZGTUGdvHH38sAIiFCxfarMvOzhZqtVpERERIy/7+978LAOI3v/mNzfb79+8XAERoaKi0zGQyCS8vL9GlSxdhNptt9tm+fbsAIN5///064yQi6kjYcZmIqAMZO3YsvvnmG7u2DQkJQWhoqM3y4cOH469//SuOHj2KadOm1br/jBkzsGXLFgwdOhQzZ87EmDFjMHz4cJsOzkePHgUA6Q7E/TFEREQgMzMTxcXF8PDwwPHjx6U47hcTEwO1Wv7VlpGRgfz8fBgMBqxcudJmnxs3bgAAzp07V+tjISLqaFgkEBFRjfz9/etcXlhYWOf+TzzxBLZt24Z3330XGzZswLp166BQKDBq1Ci888476N+/PwBL86G6zhcYGIjMzEwUFRXBw8NDOq+fn5/NtiqVSmrGZHX79m0AwOnTp3H69Ola4y0tLa3z8RARdSTsuExERDXKy8urc7lOp6v3GJMnT8a+ffuQn5+PnTt3Yv78+di7dy/GjRuHgoICAICnp2ed58vNzZVtZz3v9evXbbY1mUy4deuWbJl1v2nTpkEIUevfpk2b6n08REQdBYsEIiKq0aVLl5CdnW2zfP/+/QCAAQMG2H0sDw8PjBs3Dhs3bsTTTz+NvLw8pKamyo5z//CpAHD58mX8+OOPiIiIgIeHBwBInaCtcdzr4MGDqKqqki3r0aMHPD09ceTIERiNRrtjJiLqyFgkEBFRjUwmE1555RWIewbBO3HiBD755BN06tQJEyZMqHP/lJQUmEwmm+XWOwDOzs4ALHcbdDodNm3aJGsOJITA8uXLUVVVhaefflpaPnnyZHh6euJvf/sbMjMzpeVGoxG/+93vbM6nVquxcOFCZGdn47/+679qLBROnTpV450JIqKOin0SiIg6kAsXLtQ54/LLL78s/Xjv27cvDhw4gKioKMTFxeHGjRv44osvUFVVhY0bN0rDn9bmueeew9WrVzFs2DCEhYVBoVDgwIEDOHToEIYOHYphw4YBsDQH+vDDDxEfH4/o6GhMnz4dnTp1wq5du5CWloYhQ4Zg2bJl0nF1Oh3WrFmDp59+GlFRUZgxYwZ0Oh127NgBFxcXBAYG2sSycuVKpKenY82aNfj666/x8MMPw8/PDzk5OTh58iSOHz+OgwcP1tjPgYioQ3LYuEpERNRq7BkCFYDIz88XQliGQB0xYoS4fPmymD59uvD29hbOzs4iJiZGfPfddzbHr2kI1M8//1w8+eSTokuXLsLV1VXodDrRr18/sXr1alFcXGxzjJSUFDF+/Hih1+uFk5OT6N69u0hISBAlJSU1PqatW7eKQYMGCa1WK/z8/MT8+fPF7du3RWhoqGwIVKuqqirxwQcfiNjYWOHp6Sm0Wq0ICQkR48aNE+vXr6/1PEREHREnUyMiIhsKhUKaAZmIiDoe9kkgIiIiIiIZFglERERERCTDIoGIiIiIiGQ4uhEREdlgdzUioo6NdxKIiIiIiEiGRQIREREREcmwSCAiIiIiIhkWCUREREREJMMigYiIiIiIZFgkEBERERGRDIsEIiIiIiKSYZFAREREREQyLBKIiIiIiEjm/wCthzcy7WRAbgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# extra code â this cell generates and saves Figure 18â10\n",
        "plt.figure(figsize=(8, 4))\n",
        "plt.plot(rewards)\n",
        "plt.xlabel(\"Episode\", fontsize=14)\n",
        "plt.ylabel(\"Sum of rewards\", fontsize=14)\n",
        "plt.grid(True)\n",
        "save_fig(\"dqn_rewards_plot\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Commented and ammended code:"
      ],
      "metadata": {
        "id": "IGsA73E3XSVh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "assert sys.version_info >= (3, 10)\n",
        "\n",
        "from packaging import version\n",
        "import tensorflow as tf\n",
        "assert version.parse(tf.__version__) >= version.parse(\"2.8.0\")\n",
        "\n",
        "import matplotlib.animation\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Check if running in Google Colab\n",
        "IS_COLAB = \"google.colab\" in sys.modules\n",
        "if IS_COLAB:\n",
        "    import os\n",
        "    os.environ[\"TF_USE_LEGACY_KERAS\"] = \"1\"\n",
        "    import tf_keras\n",
        "\n",
        "# Install required packages in Colab or Kaggle environments\n",
        "if \"google.colab\" in sys.modules or \"kaggle_secrets\" in sys.modules:\n",
        "    %pip install -q -U gymnasium swig\n",
        "    %pip install -q -U gymnasium[classic_control,box2d,atari]\n",
        "\n",
        "import gymnasium as gym\n",
        "\n",
        "# Set Matplotlib defaults\n",
        "plt.rc('font', size=14)\n",
        "plt.rc('axes', labelsize=14, titlesize=14)\n",
        "plt.rc('legend', fontsize=14)\n",
        "plt.rc('xtick', labelsize=10)\n",
        "plt.rc('ytick', labelsize=10)\n",
        "plt.rc('animation', html='jshtml')\n",
        "\n",
        "from pathlib import Path\n",
        "\n",
        "# Create directory for saving images\n",
        "IMAGES_PATH = Path() / \"images\" / \"rl\"\n",
        "IMAGES_PATH.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
        "    path = IMAGES_PATH / f\"{fig_id}.{fig_extension}\"\n",
        "    if tight_layout:\n",
        "        plt.tight_layout()\n",
        "    plt.savefig(path, format=fig_extension, dpi=resolution)\n",
        "\n",
        "# Check for GPU availability\n",
        "if not tf.config.list_physical_devices('GPU'):\n",
        "    print(\"No GPU was detected. Neural nets can be very slow without a GPU.\")\n",
        "    if \"google.colab\" in sys.modules:\n",
        "        print(\"Go to Runtime > Change runtime and select a GPU hardware accelerator.\")\n",
        "    if \"kaggle_secrets\" in sys.modules:\n",
        "        print(\"Go to Settings > Accelerator and select GPU.\")\n",
        "\n",
        "# Create the MountainCar environment\n",
        "env = gym.make(\"MountainCar-v0\", render_mode=\"rgb_array\")\n",
        "env.reset()  # Ensure environment is initialized\n",
        "\n",
        "def plot_environment(env, figsize=(5, 4)):\n",
        "    \"\"\" Renders and plots the environment \"\"\"\n",
        "    env.reset()\n",
        "    plt.figure(figsize=figsize)\n",
        "    img = env.render()\n",
        "    plt.imshow(img)\n",
        "    plt.axis(\"off\")\n",
        "    return img\n",
        "\n",
        "plot_environment(env)\n",
        "plt.show()\n",
        "\n",
        "# Define action space\n",
        "env.action_space\n",
        "\n",
        "# Take a step in the environment\n",
        "action = 1  # Move right\n",
        "obs, reward, done, truncated, info = env.step(action)\n",
        "\n",
        "if done or truncated:\n",
        "    obs, info = env.reset()\n",
        "\n",
        "# Set random seeds for reproducibility\n",
        "env.reset(seed=42)\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define Neural Network model\n",
        "input_shape = [2]\n",
        "n_outputs = 3\n",
        "\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(28, activation=\"elu\", input_shape=input_shape),\n",
        "    tf.keras.layers.Dense(28, activation=\"elu\"),\n",
        "    tf.keras.layers.Dense(n_outputs)\n",
        "])\n",
        "\n",
        "# Define epsilon-greedy policy\n",
        "def epsilon_greedy_policy(state, epsilon=0):\n",
        "    if np.random.rand() < epsilon:\n",
        "        return np.random.randint(n_outputs)  # Random action\n",
        "    else:\n",
        "        Q_values = model.predict(state[np.newaxis], verbose=0)[0]\n",
        "        return Q_values.argmax()  # Best action\n",
        "\n",
        "from collections import deque\n",
        "\n",
        "# Experience replay buffer\n",
        "replay_buffer = deque(maxlen=2000)\n",
        "\n",
        "def sample_experiences(batch_size):\n",
        "    indices = np.random.randint(len(replay_buffer), size=batch_size)\n",
        "    batch = [replay_buffer[index] for index in indices]\n",
        "    return [\n",
        "        np.array([experience[field_index] for experience in batch])\n",
        "        for field_index in range(6)\n",
        "    ]  # [states, actions, rewards, next_states, dones, truncateds]\n",
        "\n",
        "def play_one_step(env, state, epsilon):\n",
        "    action = epsilon_greedy_policy(state, epsilon)\n",
        "    next_state, reward, done, truncated, info = env.step(action)\n",
        "    replay_buffer.append((state, action, reward, next_state, done, truncated))\n",
        "    return next_state, reward, done, truncated, info\n",
        "\n",
        "# Hyperparameters\n",
        "batch_size = 32\n",
        "discount_factor = 0.95\n",
        "optimizer = tf.keras.optimizers.Nadam(learning_rate=1e-2)\n",
        "loss_fn = tf.keras.losses.mean_squared_error\n",
        "\n",
        "def training_step(batch_size):\n",
        "    \"\"\" Perform one training step on the model \"\"\"\n",
        "    experiences = sample_experiences(batch_size)\n",
        "    states, actions, rewards, next_states, dones, truncateds = experiences\n",
        "    next_Q_values = model.predict(next_states, verbose=0)\n",
        "    max_next_Q_values = next_Q_values.max(axis=1)  # Use max, not min\n",
        "    runs = np.logical_or(dones, truncateds).astype(float)  # Proper logical OR\n",
        "    target_Q_values = rewards + (1.0 - runs) * discount_factor * max_next_Q_values\n",
        "    target_Q_values = target_Q_values.reshape(-1, 1)\n",
        "    mask = tf.one_hot(actions, n_outputs)\n",
        "\n",
        "    with tf.GradientTape() as tape:\n",
        "        all_Q_values = model(states)\n",
        "        Q_values = tf.reduce_sum(all_Q_values * mask, axis=1, keepdims=True)\n",
        "        loss = tf.reduce_mean(loss_fn(target_Q_values, Q_values))\n",
        "\n",
        "    grads = tape.gradient(loss, model.trainable_variables)\n",
        "    optimizer.apply_gradients(zip(grads, model.trainable_variables))\n",
        "\n",
        "# Train the model\n",
        "rewards = []\n",
        "best_score = 0\n",
        "\n",
        "def running_average(data, window_size=10):\n",
        "    return np.convolve(data, np.ones(window_size)/window_size, mode='valid')\n",
        "\n",
        "epsilon = 0.5  # Initial epsilon for exploration\n",
        "epsilon_decay = 0.99  # Decay factor for epsilon\n",
        "\n",
        "total_episodes = 150\n",
        "for episode in range(total_episodes):\n",
        "    obs, info = env.reset()\n",
        "    for step in range(200):\n",
        "        obs, reward, done, truncated, info = play_one_step(env, obs, epsilon)\n",
        "        if done or truncated:\n",
        "            break\n",
        "\n",
        "    print(f\"\\rEpisode: {episode + 1}, Steps: {step + 1}, eps: {epsilon:.3f}\", end=\"\")\n",
        "    rewards.append(step)\n",
        "\n",
        "    if step >= best_score:\n",
        "        best_weights = model.get_weights()\n",
        "        best_score = step\n",
        "\n",
        "    if episode > 50:\n",
        "        training_step(batch_size)\n",
        "\n",
        "    epsilon = max(0.01, epsilon * epsilon_decay)  # Decrease epsilon\n",
        "\n",
        "model.set_weights(best_weights)  # Restore best model weights\n",
        "\n",
        "# Plot rewards with running average\n",
        "plt.figure(figsize=(8, 4))\n",
        "plt.plot(rewards, label='Rewards per Episode')\n",
        "plt.plot(running_average(rewards, window_size=10), label='Running Average', linestyle='dashed')\n",
        "plt.xlabel(\"Episode\", fontsize=14)\n",
        "plt.ylabel(\"Sum of rewards\", fontsize=14)\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "save_fig(\"dqn_rewards_plot\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 690
        },
        "id": "_FqxrN0mWp9x",
        "outputId": "d9f11bc2-4d1c-458d-b38e-7747b3510de7"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episode: 150, Steps: 200, eps: 0.112"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "interpreter": {
      "hash": "95c485e91159f3a8b550e08492cb4ed2557284663e79130c96242e7ff9e65ae1"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.10"
    },
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "A100"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}